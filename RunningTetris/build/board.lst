ARM GAS  /tmp/ccuTCLvw.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"board.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.flood,"ax",%progbits
  18              		.align	1
  19              		.global	flood
  20              		.syntax unified
  21              		.thumb
  22              		.thumb_func
  23              		.fpu fpv4-sp-d16
  25              	flood:
  26              	.LFB735:
  27              		.file 1 "Core/Src/board.c"
   1:Core/Src/board.c **** /* board.cpp */
   2:Core/Src/board.c **** #include "../Inc/board.h"
   3:Core/Src/board.c **** #include "../Inc/main.h"
   4:Core/Src/board.c **** 
   5:Core/Src/board.c **** #define TAILLE_CASE  11
   6:Core/Src/board.c **** #define DECALAGE_GAUCHE 20
   7:Core/Src/board.c **** #define DECALAGE_HAUT 20
   8:Core/Src/board.c **** 
   9:Core/Src/board.c ****  
  10:Core/Src/board.c **** void flood(Board * board, int i, int j, int px, int py, int k, int o, int value, bool visited[][SIZ
  11:Core/Src/board.c **** {
  28              		.loc 1 11 0
  29              		.cfi_startproc
  30              		@ args = 20, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              	.LVL0:
  33 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
  34              	.LCFI0:
  35              		.cfi_def_cfa_offset 24
  36              		.cfi_offset 4, -24
  37              		.cfi_offset 5, -20
  38              		.cfi_offset 6, -16
  39              		.cfi_offset 7, -12
  40              		.cfi_offset 8, -8
  41              		.cfi_offset 14, -4
  42 0004 86B0     		sub	sp, sp, #24
  43              	.LCFI1:
  44              		.cfi_def_cfa_offset 48
  45 0006 0C9C     		ldr	r4, [sp, #48]
  12:Core/Src/board.c ****     if(px < 0 || px >= SIZE || py < 0 || py >= SIZE || visited[px][py] || PIECES[k][o][px][py] == F
  46              		.loc 1 12 0
ARM GAS  /tmp/ccuTCLvw.s 			page 2


  47 0008 032B     		cmp	r3, #3
  48 000a 15D8     		bhi	.L1
  49              		.loc 1 12 0 is_stmt 0 discriminator 1
  50 000c 002C     		cmp	r4, #0
  51 000e 13DB     		blt	.L1
  52              		.loc 1 12 0 discriminator 2
  53 0010 032C     		cmp	r4, #3
  54 0012 11DC     		bgt	.L1
  55              		.loc 1 12 0 discriminator 3
  56 0014 109D     		ldr	r5, [sp, #64]
  57 0016 05EB031E 		add	lr, r5, r3, lsl #4
  58 001a 5EF82450 		ldr	r5, [lr, r4, lsl #2]
  59 001e 5DB9     		cbnz	r5, .L1
  60              		.loc 1 12 0 discriminator 4
  61 0020 0E9D     		ldr	r5, [sp, #56]
  62 0022 0D9E     		ldr	r6, [sp, #52]
  63 0024 05EB8605 		add	r5, r5, r6, lsl #2
  64 0028 03EB8505 		add	r5, r3, r5, lsl #2
  65 002c 04EB8505 		add	r5, r4, r5, lsl #2
  66 0030 284E     		ldr	r6, .L5
  67 0032 56F82550 		ldr	r5, [r6, r5, lsl #2]
  68 0036 15B9     		cbnz	r5, .L4
  69              	.LVL1:
  70              	.L1:
  13:Core/Src/board.c ****         return;
  14:Core/Src/board.c ****     visited[px][py] = true;
  15:Core/Src/board.c **** 
  16:Core/Src/board.c ****     board->area[j][i] = value;
  17:Core/Src/board.c ****     flood(board, i, j - 1, px, py - 1, k, o, value, visited);
  18:Core/Src/board.c ****     flood(board, i + 1, j, px + 1, py, k, o, value, visited);
  19:Core/Src/board.c ****     flood(board, i, j + 1, px, py + 1, k, o, value, visited);
  20:Core/Src/board.c ****     flood(board, i - 1, j, px - 1, py, k, o, value, visited);
  21:Core/Src/board.c **** }
  71              		.loc 1 21 0 is_stmt 1
  72 0038 06B0     		add	sp, sp, #24
  73              	.LCFI2:
  74              		.cfi_remember_state
  75              		.cfi_def_cfa_offset 24
  76              		@ sp needed
  77 003a BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
  78              	.LVL2:
  79              	.L4:
  80              	.LCFI3:
  81              		.cfi_restore_state
  82 003e 1D46     		mov	r5, r3
  83 0040 1746     		mov	r7, r2
  84 0042 0E46     		mov	r6, r1
  85 0044 8046     		mov	r8, r0
  14:Core/Src/board.c **** 
  86              		.loc 1 14 0
  87 0046 0123     		movs	r3, #1
  88              	.LVL3:
  89 0048 4EF82430 		str	r3, [lr, r4, lsl #2]
  16:Core/Src/board.c ****     flood(board, i, j - 1, px, py - 1, k, o, value, visited);
  90              		.loc 1 16 0
  91 004c 02EB8202 		add	r2, r2, r2, lsl #2
  92              	.LVL4:
ARM GAS  /tmp/ccuTCLvw.s 			page 3


  93 0050 9300     		lsls	r3, r2, #2
  94 0052 0B44     		add	r3, r3, r1
  95 0054 00EB8303 		add	r3, r0, r3, lsl #2
  96 0058 0F9A     		ldr	r2, [sp, #60]
  97 005a 5A60     		str	r2, [r3, #4]
  17:Core/Src/board.c ****     flood(board, i + 1, j, px + 1, py, k, o, value, visited);
  98              		.loc 1 17 0
  99 005c 109B     		ldr	r3, [sp, #64]
 100 005e 0493     		str	r3, [sp, #16]
 101 0060 0392     		str	r2, [sp, #12]
 102 0062 0E9B     		ldr	r3, [sp, #56]
 103 0064 0293     		str	r3, [sp, #8]
 104 0066 0D9B     		ldr	r3, [sp, #52]
 105 0068 0193     		str	r3, [sp, #4]
 106 006a 631E     		subs	r3, r4, #1
 107 006c 0093     		str	r3, [sp]
 108 006e 2B46     		mov	r3, r5
 109 0070 7A1E     		subs	r2, r7, #1
 110 0072 FFF7FEFF 		bl	flood
 111              	.LVL5:
  18:Core/Src/board.c ****     flood(board, i, j + 1, px, py + 1, k, o, value, visited);
 112              		.loc 1 18 0
 113 0076 109B     		ldr	r3, [sp, #64]
 114 0078 0493     		str	r3, [sp, #16]
 115 007a 0F9B     		ldr	r3, [sp, #60]
 116 007c 0393     		str	r3, [sp, #12]
 117 007e 0E9B     		ldr	r3, [sp, #56]
 118 0080 0293     		str	r3, [sp, #8]
 119 0082 0D9B     		ldr	r3, [sp, #52]
 120 0084 0193     		str	r3, [sp, #4]
 121 0086 0094     		str	r4, [sp]
 122 0088 6B1C     		adds	r3, r5, #1
 123 008a 3A46     		mov	r2, r7
 124 008c 711C     		adds	r1, r6, #1
 125 008e 4046     		mov	r0, r8
 126 0090 FFF7FEFF 		bl	flood
 127              	.LVL6:
  19:Core/Src/board.c ****     flood(board, i - 1, j, px - 1, py, k, o, value, visited);
 128              		.loc 1 19 0
 129 0094 109B     		ldr	r3, [sp, #64]
 130 0096 0493     		str	r3, [sp, #16]
 131 0098 0F9B     		ldr	r3, [sp, #60]
 132 009a 0393     		str	r3, [sp, #12]
 133 009c 0E9B     		ldr	r3, [sp, #56]
 134 009e 0293     		str	r3, [sp, #8]
 135 00a0 0D9B     		ldr	r3, [sp, #52]
 136 00a2 0193     		str	r3, [sp, #4]
 137 00a4 631C     		adds	r3, r4, #1
 138 00a6 0093     		str	r3, [sp]
 139 00a8 2B46     		mov	r3, r5
 140 00aa 7A1C     		adds	r2, r7, #1
 141 00ac 3146     		mov	r1, r6
 142 00ae 4046     		mov	r0, r8
 143 00b0 FFF7FEFF 		bl	flood
 144              	.LVL7:
  20:Core/Src/board.c **** }
 145              		.loc 1 20 0
ARM GAS  /tmp/ccuTCLvw.s 			page 4


 146 00b4 109B     		ldr	r3, [sp, #64]
 147 00b6 0493     		str	r3, [sp, #16]
 148 00b8 0F9B     		ldr	r3, [sp, #60]
 149 00ba 0393     		str	r3, [sp, #12]
 150 00bc 0E9B     		ldr	r3, [sp, #56]
 151 00be 0293     		str	r3, [sp, #8]
 152 00c0 0D9B     		ldr	r3, [sp, #52]
 153 00c2 0193     		str	r3, [sp, #4]
 154 00c4 0094     		str	r4, [sp]
 155 00c6 6B1E     		subs	r3, r5, #1
 156 00c8 3A46     		mov	r2, r7
 157 00ca 711E     		subs	r1, r6, #1
 158 00cc 4046     		mov	r0, r8
 159 00ce FFF7FEFF 		bl	flood
 160              	.LVL8:
 161 00d2 B1E7     		b	.L1
 162              	.L6:
 163              		.align	2
 164              	.L5:
 165 00d4 00000000 		.word	.LANCHOR0
 166              		.cfi_endproc
 167              	.LFE735:
 169              		.section	.text.floodB,"ax",%progbits
 170              		.align	1
 171              		.global	floodB
 172              		.syntax unified
 173              		.thumb
 174              		.thumb_func
 175              		.fpu fpv4-sp-d16
 177              	floodB:
 178              	.LFB736:
  22:Core/Src/board.c ****  
  23:Core/Src/board.c **** void floodB(Board * board, int i, int j, int px, int py, int k, int o, bool * flag, bool visited[][
  24:Core/Src/board.c **** {
 179              		.loc 1 24 0
 180              		.cfi_startproc
 181              		@ args = 20, pretend = 0, frame = 0
 182              		@ frame_needed = 0, uses_anonymous_args = 0
 183              	.LVL9:
 184 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 185              	.LCFI4:
 186              		.cfi_def_cfa_offset 24
 187              		.cfi_offset 4, -24
 188              		.cfi_offset 5, -20
 189              		.cfi_offset 6, -16
 190              		.cfi_offset 7, -12
 191              		.cfi_offset 8, -8
 192              		.cfi_offset 14, -4
 193 0004 86B0     		sub	sp, sp, #24
 194              	.LCFI5:
 195              		.cfi_def_cfa_offset 48
 196 0006 0C9C     		ldr	r4, [sp, #48]
  25:Core/Src/board.c ****     if(px < 0 || px >= SIZE || py < 0 || py >= SIZE || visited[px][py] || PIECES[k][o][px][py] == F
 197              		.loc 1 25 0
 198 0008 032B     		cmp	r3, #3
 199 000a 29D8     		bhi	.L7
 200              		.loc 1 25 0 is_stmt 0 discriminator 1
ARM GAS  /tmp/ccuTCLvw.s 			page 5


 201 000c 002C     		cmp	r4, #0
 202 000e 27DB     		blt	.L7
 203              		.loc 1 25 0 discriminator 2
 204 0010 032C     		cmp	r4, #3
 205 0012 25DC     		bgt	.L7
 206              		.loc 1 25 0 discriminator 3
 207 0014 109D     		ldr	r5, [sp, #64]
 208 0016 05EB0316 		add	r6, r5, r3, lsl #4
 209 001a 56F82450 		ldr	r5, [r6, r4, lsl #2]
 210 001e FDB9     		cbnz	r5, .L7
 211              		.loc 1 25 0 discriminator 4
 212 0020 0E9D     		ldr	r5, [sp, #56]
 213 0022 0D9F     		ldr	r7, [sp, #52]
 214 0024 05EB8705 		add	r5, r5, r7, lsl #2
 215 0028 03EB8505 		add	r5, r3, r5, lsl #2
 216 002c 04EB8505 		add	r5, r4, r5, lsl #2
 217 0030 2E4F     		ldr	r7, .L12
 218 0032 57F82550 		ldr	r5, [r7, r5, lsl #2]
 219 0036 9DB1     		cbz	r5, .L7
  26:Core/Src/board.c ****         return;
  27:Core/Src/board.c ****  
  28:Core/Src/board.c ****     visited[px][py] = true;
 220              		.loc 1 28 0 is_stmt 1
 221 0038 0125     		movs	r5, #1
 222 003a 46F82450 		str	r5, [r6, r4, lsl #2]
  29:Core/Src/board.c ****  
  30:Core/Src/board.c ****     if(i < 0 || i >= BOARD_HEIGHT || j < 0 || j >= BOARD_WIDTH || board->area[j][i] != FREE )
 223              		.loc 1 30 0
 224 003e 1329     		cmp	r1, #19
 225 0040 0BD8     		bhi	.L9
 226              		.loc 1 30 0 is_stmt 0 discriminator 1
 227 0042 002A     		cmp	r2, #0
 228 0044 09DB     		blt	.L9
 229              		.loc 1 30 0 discriminator 2
 230 0046 092A     		cmp	r2, #9
 231 0048 07DC     		bgt	.L9
 232              		.loc 1 30 0 discriminator 3
 233 004a 02EB8206 		add	r6, r2, r2, lsl #2
 234 004e B500     		lsls	r5, r6, #2
 235 0050 0D44     		add	r5, r5, r1
 236 0052 00EB8505 		add	r5, r0, r5, lsl #2
 237 0056 6D68     		ldr	r5, [r5, #4]
 238 0058 2DB1     		cbz	r5, .L10
 239              	.L9:
  31:Core/Src/board.c ****     {
  32:Core/Src/board.c ****         *flag = false;
 240              		.loc 1 32 0 is_stmt 1
 241 005a 0023     		movs	r3, #0
 242              	.LVL10:
 243 005c 0F9A     		ldr	r2, [sp, #60]
 244              	.LVL11:
 245 005e 1360     		str	r3, [r2]
 246              	.LVL12:
 247              	.L7:
  33:Core/Src/board.c ****         return;
  34:Core/Src/board.c ****     }
  35:Core/Src/board.c ****  
ARM GAS  /tmp/ccuTCLvw.s 			page 6


  36:Core/Src/board.c ****     floodB(board, i, j - 1, px, py - 1, k, o, flag, visited);
  37:Core/Src/board.c ****     floodB(board, i + 1, j, px + 1, py, k, o, flag, visited);
  38:Core/Src/board.c ****     floodB(board, i, j + 1, px, py + 1, k, o, flag, visited);
  39:Core/Src/board.c ****     floodB(board, i - 1, j, px - 1, py, k, o, flag, visited);
  40:Core/Src/board.c **** }
 248              		.loc 1 40 0
 249 0060 06B0     		add	sp, sp, #24
 250              	.LCFI6:
 251              		.cfi_remember_state
 252              		.cfi_def_cfa_offset 24
 253              		@ sp needed
 254 0062 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 255              	.LVL13:
 256              	.L10:
 257              	.LCFI7:
 258              		.cfi_restore_state
 259 0066 9846     		mov	r8, r3
 260 0068 1746     		mov	r7, r2
 261 006a 0D46     		mov	r5, r1
 262 006c 0646     		mov	r6, r0
  36:Core/Src/board.c ****     floodB(board, i + 1, j, px + 1, py, k, o, flag, visited);
 263              		.loc 1 36 0
 264 006e 109B     		ldr	r3, [sp, #64]
 265              	.LVL14:
 266 0070 0493     		str	r3, [sp, #16]
 267 0072 0F9B     		ldr	r3, [sp, #60]
 268 0074 0393     		str	r3, [sp, #12]
 269 0076 0E9B     		ldr	r3, [sp, #56]
 270 0078 0293     		str	r3, [sp, #8]
 271 007a 0D9B     		ldr	r3, [sp, #52]
 272 007c 0193     		str	r3, [sp, #4]
 273 007e 631E     		subs	r3, r4, #1
 274 0080 0093     		str	r3, [sp]
 275 0082 4346     		mov	r3, r8
 276 0084 013A     		subs	r2, r2, #1
 277              	.LVL15:
 278 0086 FFF7FEFF 		bl	floodB
 279              	.LVL16:
  37:Core/Src/board.c ****     floodB(board, i, j + 1, px, py + 1, k, o, flag, visited);
 280              		.loc 1 37 0
 281 008a 109B     		ldr	r3, [sp, #64]
 282 008c 0493     		str	r3, [sp, #16]
 283 008e 0F9B     		ldr	r3, [sp, #60]
 284 0090 0393     		str	r3, [sp, #12]
 285 0092 0E9B     		ldr	r3, [sp, #56]
 286 0094 0293     		str	r3, [sp, #8]
 287 0096 0D9B     		ldr	r3, [sp, #52]
 288 0098 0193     		str	r3, [sp, #4]
 289 009a 0094     		str	r4, [sp]
 290 009c 08F10103 		add	r3, r8, #1
 291 00a0 3A46     		mov	r2, r7
 292 00a2 691C     		adds	r1, r5, #1
 293 00a4 3046     		mov	r0, r6
 294 00a6 FFF7FEFF 		bl	floodB
 295              	.LVL17:
  38:Core/Src/board.c ****     floodB(board, i - 1, j, px - 1, py, k, o, flag, visited);
 296              		.loc 1 38 0
ARM GAS  /tmp/ccuTCLvw.s 			page 7


 297 00aa 109B     		ldr	r3, [sp, #64]
 298 00ac 0493     		str	r3, [sp, #16]
 299 00ae 0F9B     		ldr	r3, [sp, #60]
 300 00b0 0393     		str	r3, [sp, #12]
 301 00b2 0E9B     		ldr	r3, [sp, #56]
 302 00b4 0293     		str	r3, [sp, #8]
 303 00b6 0D9B     		ldr	r3, [sp, #52]
 304 00b8 0193     		str	r3, [sp, #4]
 305 00ba 631C     		adds	r3, r4, #1
 306 00bc 0093     		str	r3, [sp]
 307 00be 4346     		mov	r3, r8
 308 00c0 7A1C     		adds	r2, r7, #1
 309 00c2 2946     		mov	r1, r5
 310 00c4 3046     		mov	r0, r6
 311 00c6 FFF7FEFF 		bl	floodB
 312              	.LVL18:
  39:Core/Src/board.c **** }
 313              		.loc 1 39 0
 314 00ca 109B     		ldr	r3, [sp, #64]
 315 00cc 0493     		str	r3, [sp, #16]
 316 00ce 0F9B     		ldr	r3, [sp, #60]
 317 00d0 0393     		str	r3, [sp, #12]
 318 00d2 0E9B     		ldr	r3, [sp, #56]
 319 00d4 0293     		str	r3, [sp, #8]
 320 00d6 0D9B     		ldr	r3, [sp, #52]
 321 00d8 0193     		str	r3, [sp, #4]
 322 00da 0094     		str	r4, [sp]
 323 00dc 08F1FF33 		add	r3, r8, #-1
 324 00e0 3A46     		mov	r2, r7
 325 00e2 691E     		subs	r1, r5, #1
 326 00e4 3046     		mov	r0, r6
 327 00e6 FFF7FEFF 		bl	floodB
 328              	.LVL19:
 329 00ea B9E7     		b	.L7
 330              	.L13:
 331              		.align	2
 332              	.L12:
 333 00ec 00000000 		.word	.LANCHOR0
 334              		.cfi_endproc
 335              	.LFE736:
 337              		.section	.text.floodFill,"ax",%progbits
 338              		.align	1
 339              		.global	floodFill
 340              		.syntax unified
 341              		.thumb
 342              		.thumb_func
 343              		.fpu fpv4-sp-d16
 345              	floodFill:
 346              	.LFB737:
  41:Core/Src/board.c ****  
  42:Core/Src/board.c **** void floodFill(Board * board, int i, int j, int px, int py, int k, int o, int value)
  43:Core/Src/board.c **** {
 347              		.loc 1 43 0
 348              		.cfi_startproc
 349              		@ args = 16, pretend = 0, frame = 64
 350              		@ frame_needed = 0, uses_anonymous_args = 0
 351              	.LVL20:
ARM GAS  /tmp/ccuTCLvw.s 			page 8


 352 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 353              	.LCFI8:
 354              		.cfi_def_cfa_offset 20
 355              		.cfi_offset 4, -20
 356              		.cfi_offset 5, -16
 357              		.cfi_offset 6, -12
 358              		.cfi_offset 7, -8
 359              		.cfi_offset 14, -4
 360 0002 97B0     		sub	sp, sp, #92
 361              	.LCFI9:
 362              		.cfi_def_cfa_offset 112
 363              	.LVL21:
 364              	.LBB2:
  44:Core/Src/board.c ****     bool visited[SIZE][SIZE];
  45:Core/Src/board.c ****  
  46:Core/Src/board.c ****     for(int l = 0; l < SIZE; ++l)
 365              		.loc 1 46 0
 366 0004 0027     		movs	r7, #0
 367 0006 0BE0     		b	.L15
 368              	.LVL22:
 369              	.L16:
 370              	.LBB3:
  47:Core/Src/board.c ****         for(int m = 0; m < SIZE; ++m)
  48:Core/Src/board.c ****             visited[l][m] = false;
 371              		.loc 1 48 0 discriminator 3
 372 0008 04EB8705 		add	r5, r4, r7, lsl #2
 373 000c 16AE     		add	r6, sp, #88
 374 000e 06EB8505 		add	r5, r6, r5, lsl #2
 375 0012 0026     		movs	r6, #0
 376 0014 45F8406C 		str	r6, [r5, #-64]
  47:Core/Src/board.c ****         for(int m = 0; m < SIZE; ++m)
 377              		.loc 1 47 0 discriminator 3
 378 0018 0134     		adds	r4, r4, #1
 379              	.LVL23:
 380              	.L17:
  47:Core/Src/board.c ****         for(int m = 0; m < SIZE; ++m)
 381              		.loc 1 47 0 is_stmt 0 discriminator 1
 382 001a 032C     		cmp	r4, #3
 383 001c F4DD     		ble	.L16
 384              	.LBE3:
  46:Core/Src/board.c ****         for(int m = 0; m < SIZE; ++m)
 385              		.loc 1 46 0 is_stmt 1 discriminator 2
 386 001e 0137     		adds	r7, r7, #1
 387              	.LVL24:
 388              	.L15:
  46:Core/Src/board.c ****         for(int m = 0; m < SIZE; ++m)
 389              		.loc 1 46 0 is_stmt 0 discriminator 1
 390 0020 032F     		cmp	r7, #3
 391 0022 01DC     		bgt	.L20
 392 0024 0024     		movs	r4, #0
 393 0026 F8E7     		b	.L17
 394              	.L20:
 395              	.LBE2:
  49:Core/Src/board.c ****     flood(board, i, j, px, py, k, o, value, visited);
 396              		.loc 1 49 0 is_stmt 1
 397 0028 06AC     		add	r4, sp, #24
 398 002a 0494     		str	r4, [sp, #16]
ARM GAS  /tmp/ccuTCLvw.s 			page 9


 399 002c 1F9C     		ldr	r4, [sp, #124]
 400 002e 0394     		str	r4, [sp, #12]
 401 0030 1E9C     		ldr	r4, [sp, #120]
 402 0032 0294     		str	r4, [sp, #8]
 403 0034 1D9C     		ldr	r4, [sp, #116]
 404 0036 0194     		str	r4, [sp, #4]
 405 0038 1C9C     		ldr	r4, [sp, #112]
 406 003a 0094     		str	r4, [sp]
 407 003c FFF7FEFF 		bl	flood
 408              	.LVL25:
  50:Core/Src/board.c **** }
 409              		.loc 1 50 0
 410 0040 17B0     		add	sp, sp, #92
 411              	.LCFI10:
 412              		.cfi_def_cfa_offset 20
 413              		@ sp needed
 414 0042 F0BD     		pop	{r4, r5, r6, r7, pc}
 415              		.cfi_endproc
 416              	.LFE737:
 418              		.section	.text.initBoard,"ax",%progbits
 419              		.align	1
 420              		.global	initBoard
 421              		.syntax unified
 422              		.thumb
 423              		.thumb_func
 424              		.fpu fpv4-sp-d16
 426              	initBoard:
 427              	.LFB738:
  51:Core/Src/board.c ****  
  52:Core/Src/board.c **** void initBoard(Board * board)
  53:Core/Src/board.c **** {
 428              		.loc 1 53 0
 429              		.cfi_startproc
 430              		@ args = 0, pretend = 0, frame = 0
 431              		@ frame_needed = 0, uses_anonymous_args = 0
 432              		@ link register save eliminated.
 433              	.LVL26:
 434 0000 10B4     		push	{r4}
 435              	.LCFI11:
 436              		.cfi_def_cfa_offset 4
 437              		.cfi_offset 4, -4
 438              	.LVL27:
 439              	.LBB4:
  54:Core/Src/board.c ****     //board = malloc(sizeof(Board));
  55:Core/Src/board.c ****     //board->area = malloc(sizeof(int)*BOARD_HEIGHT*BOARD_WIDTH);
  56:Core/Src/board.c ****     for(int i = 0; i < BOARD_WIDTH; ++i)
 440              		.loc 1 56 0
 441 0002 0024     		movs	r4, #0
 442 0004 0BE0     		b	.L22
 443              	.LVL28:
 444              	.L23:
 445              	.LBB5:
  57:Core/Src/board.c ****         for(int j = 0; j < BOARD_HEIGHT; ++j)
  58:Core/Src/board.c ****             board->area[i][j] = FREE;
 446              		.loc 1 58 0 discriminator 3
 447 0006 04EB8401 		add	r1, r4, r4, lsl #2
 448 000a 8B00     		lsls	r3, r1, #2
ARM GAS  /tmp/ccuTCLvw.s 			page 10


 449 000c 1344     		add	r3, r3, r2
 450 000e 00EB8303 		add	r3, r0, r3, lsl #2
 451 0012 0021     		movs	r1, #0
 452 0014 5960     		str	r1, [r3, #4]
  57:Core/Src/board.c ****         for(int j = 0; j < BOARD_HEIGHT; ++j)
 453              		.loc 1 57 0 discriminator 3
 454 0016 0132     		adds	r2, r2, #1
 455              	.LVL29:
 456              	.L24:
  57:Core/Src/board.c ****         for(int j = 0; j < BOARD_HEIGHT; ++j)
 457              		.loc 1 57 0 is_stmt 0 discriminator 1
 458 0018 132A     		cmp	r2, #19
 459 001a F4DD     		ble	.L23
 460              	.LBE5:
  56:Core/Src/board.c ****         for(int j = 0; j < BOARD_HEIGHT; ++j)
 461              		.loc 1 56 0 is_stmt 1 discriminator 2
 462 001c 0134     		adds	r4, r4, #1
 463              	.LVL30:
 464              	.L22:
  56:Core/Src/board.c ****         for(int j = 0; j < BOARD_HEIGHT; ++j)
 465              		.loc 1 56 0 is_stmt 0 discriminator 1
 466 001e 092C     		cmp	r4, #9
 467 0020 01DC     		bgt	.L27
 468 0022 0022     		movs	r2, #0
 469 0024 F8E7     		b	.L24
 470              	.L27:
 471              	.LBE4:
  59:Core/Src/board.c ****     
  60:Core/Src/board.c **** }
 472              		.loc 1 60 0 is_stmt 1
 473 0026 5DF8044B 		ldr	r4, [sp], #4
 474              	.LCFI12:
 475              		.cfi_restore 4
 476              		.cfi_def_cfa_offset 0
 477              	.LVL31:
 478 002a 7047     		bx	lr
 479              		.cfi_endproc
 480              	.LFE738:
 482              		.section	.text.drawPiece,"ax",%progbits
 483              		.align	1
 484              		.global	drawPiece
 485              		.syntax unified
 486              		.thumb
 487              		.thumb_func
 488              		.fpu fpv4-sp-d16
 490              	drawPiece:
 491              	.LFB739:
  61:Core/Src/board.c ****  
  62:Core/Src/board.c **** void drawPiece(Board * board, Piece * piece)
  63:Core/Src/board.c **** {
 492              		.loc 1 63 0
 493              		.cfi_startproc
 494              		@ args = 0, pretend = 0, frame = 0
 495              		@ frame_needed = 0, uses_anonymous_args = 0
 496              	.LVL32:
 497 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 498              	.LCFI13:
ARM GAS  /tmp/ccuTCLvw.s 			page 11


 499              		.cfi_def_cfa_offset 28
 500              		.cfi_offset 4, -28
 501              		.cfi_offset 5, -24
 502              		.cfi_offset 6, -20
 503              		.cfi_offset 7, -16
 504              		.cfi_offset 8, -12
 505              		.cfi_offset 9, -8
 506              		.cfi_offset 14, -4
 507 0004 85B0     		sub	sp, sp, #20
 508              	.LCFI14:
 509              		.cfi_def_cfa_offset 48
 510 0006 0646     		mov	r6, r0
 511 0008 0C46     		mov	r4, r1
  64:Core/Src/board.c ****     int i = getPosX(piece);
 512              		.loc 1 64 0
 513 000a 0846     		mov	r0, r1
 514              	.LVL33:
 515 000c FFF7FEFF 		bl	getPosX
 516              	.LVL34:
 517 0010 0746     		mov	r7, r0
 518              	.LVL35:
  65:Core/Src/board.c ****     int j = getPosY(piece);
 519              		.loc 1 65 0
 520 0012 2046     		mov	r0, r4
 521              	.LVL36:
 522 0014 FFF7FEFF 		bl	getPosY
 523              	.LVL37:
 524 0018 8046     		mov	r8, r0
 525              	.LVL38:
  66:Core/Src/board.c ****  
  67:Core/Src/board.c ****     int k = getKind(piece);
 526              		.loc 1 67 0
 527 001a 2046     		mov	r0, r4
 528              	.LVL39:
 529 001c FFF7FEFF 		bl	getKind
 530              	.LVL40:
 531 0020 0546     		mov	r5, r0
 532              	.LVL41:
  68:Core/Src/board.c ****     int o = getOrientation(piece);
 533              		.loc 1 68 0
 534 0022 2046     		mov	r0, r4
 535              	.LVL42:
 536 0024 FFF7FEFF 		bl	getOrientation
 537              	.LVL43:
 538 0028 8146     		mov	r9, r0
 539              	.LVL44:
  69:Core/Src/board.c ****  
  70:Core/Src/board.c ****     switch(k)
 540              		.loc 1 70 0
 541 002a 062D     		cmp	r5, #6
 542 002c 09D8     		bhi	.L29
 543 002e DFE805F0 		tbb	[pc, r5]
 544              	.L31:
 545 0032 24       		.byte	(.L30-.L31)/2
 546 0033 04       		.byte	(.L32-.L31)/2
 547 0034 29       		.byte	(.L33-.L31)/2
 548 0035 33       		.byte	(.L34-.L31)/2
ARM GAS  /tmp/ccuTCLvw.s 			page 12


 549 0036 1F       		.byte	(.L35-.L31)/2
 550 0037 1A       		.byte	(.L36-.L31)/2
 551 0038 2E       		.byte	(.L37-.L31)/2
 552 0039 00       		.p2align 1
 553              	.L32:
  71:Core/Src/board.c ****     {
  72:Core/Src/board.c ****         case I:
  73:Core/Src/board.c ****             setColor(piece, CYA);
 554              		.loc 1 73 0
 555 003a 0121     		movs	r1, #1
 556 003c 2046     		mov	r0, r4
 557              	.LVL45:
 558 003e FFF7FEFF 		bl	setColor
 559              	.LVL46:
 560              	.L29:
  74:Core/Src/board.c ****             break;
  75:Core/Src/board.c ****         case J:
  76:Core/Src/board.c ****             setColor(piece, BLU);
  77:Core/Src/board.c ****             break;
  78:Core/Src/board.c ****         case L:
  79:Core/Src/board.c ****             setColor(piece, ORANG);
  80:Core/Src/board.c ****             break;
  81:Core/Src/board.c ****         case O:
  82:Core/Src/board.c ****             setColor(piece, YELLO);
  83:Core/Src/board.c ****             break;
  84:Core/Src/board.c ****         case S:
  85:Core/Src/board.c ****             setColor(piece, GREE);
  86:Core/Src/board.c ****             break;
  87:Core/Src/board.c ****         case T:
  88:Core/Src/board.c ****             setColor(piece, PURPL);
  89:Core/Src/board.c ****             break;
  90:Core/Src/board.c ****         case Z:
  91:Core/Src/board.c ****             setColor(piece, RE);
  92:Core/Src/board.c ****             break;
  93:Core/Src/board.c ****         default:
  94:Core/Src/board.c ****             break;
  95:Core/Src/board.c ****     }
  96:Core/Src/board.c ****     floodFill(board, i, j, PIVOT_X, PIVOT_Y, k, o, getColor(piece));
 561              		.loc 1 96 0
 562 0042 2046     		mov	r0, r4
 563 0044 FFF7FEFF 		bl	getColor
 564              	.LVL47:
 565 0048 0390     		str	r0, [sp, #12]
 566 004a CDF80890 		str	r9, [sp, #8]
 567 004e 0195     		str	r5, [sp, #4]
 568 0050 0223     		movs	r3, #2
 569 0052 0093     		str	r3, [sp]
 570 0054 0123     		movs	r3, #1
 571 0056 4246     		mov	r2, r8
 572 0058 3946     		mov	r1, r7
 573 005a 3046     		mov	r0, r6
 574 005c FFF7FEFF 		bl	floodFill
 575              	.LVL48:
  97:Core/Src/board.c **** }
 576              		.loc 1 97 0
 577 0060 05B0     		add	sp, sp, #20
 578              	.LCFI15:
ARM GAS  /tmp/ccuTCLvw.s 			page 13


 579              		.cfi_remember_state
 580              		.cfi_def_cfa_offset 28
 581              		@ sp needed
 582 0062 BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 583              	.LVL49:
 584              	.L36:
 585              	.LCFI16:
 586              		.cfi_restore_state
  76:Core/Src/board.c ****             break;
 587              		.loc 1 76 0
 588 0066 0221     		movs	r1, #2
 589 0068 2046     		mov	r0, r4
 590              	.LVL50:
 591 006a FFF7FEFF 		bl	setColor
 592              	.LVL51:
  77:Core/Src/board.c ****         case L:
 593              		.loc 1 77 0
 594 006e E8E7     		b	.L29
 595              	.LVL52:
 596              	.L35:
  79:Core/Src/board.c ****             break;
 597              		.loc 1 79 0
 598 0070 0321     		movs	r1, #3
 599 0072 2046     		mov	r0, r4
 600              	.LVL53:
 601 0074 FFF7FEFF 		bl	setColor
 602              	.LVL54:
  80:Core/Src/board.c ****         case O:
 603              		.loc 1 80 0
 604 0078 E3E7     		b	.L29
 605              	.LVL55:
 606              	.L30:
  82:Core/Src/board.c ****             break;
 607              		.loc 1 82 0
 608 007a 0421     		movs	r1, #4
 609 007c 2046     		mov	r0, r4
 610              	.LVL56:
 611 007e FFF7FEFF 		bl	setColor
 612              	.LVL57:
  83:Core/Src/board.c ****         case S:
 613              		.loc 1 83 0
 614 0082 DEE7     		b	.L29
 615              	.LVL58:
 616              	.L33:
  85:Core/Src/board.c ****             break;
 617              		.loc 1 85 0
 618 0084 0521     		movs	r1, #5
 619 0086 2046     		mov	r0, r4
 620              	.LVL59:
 621 0088 FFF7FEFF 		bl	setColor
 622              	.LVL60:
  86:Core/Src/board.c ****         case T:
 623              		.loc 1 86 0
 624 008c D9E7     		b	.L29
 625              	.LVL61:
 626              	.L37:
  88:Core/Src/board.c ****             break;
ARM GAS  /tmp/ccuTCLvw.s 			page 14


 627              		.loc 1 88 0
 628 008e 0621     		movs	r1, #6
 629 0090 2046     		mov	r0, r4
 630              	.LVL62:
 631 0092 FFF7FEFF 		bl	setColor
 632              	.LVL63:
  89:Core/Src/board.c ****         case Z:
 633              		.loc 1 89 0
 634 0096 D4E7     		b	.L29
 635              	.LVL64:
 636              	.L34:
  91:Core/Src/board.c ****             break;
 637              		.loc 1 91 0
 638 0098 0721     		movs	r1, #7
 639 009a 2046     		mov	r0, r4
 640              	.LVL65:
 641 009c FFF7FEFF 		bl	setColor
 642              	.LVL66:
  92:Core/Src/board.c ****         default:
 643              		.loc 1 92 0
 644 00a0 CFE7     		b	.L29
 645              		.cfi_endproc
 646              	.LFE739:
 648              		.section	.text.clearPiece,"ax",%progbits
 649              		.align	1
 650              		.global	clearPiece
 651              		.syntax unified
 652              		.thumb
 653              		.thumb_func
 654              		.fpu fpv4-sp-d16
 656              	clearPiece:
 657              	.LFB740:
  98:Core/Src/board.c ****  
  99:Core/Src/board.c **** void clearPiece(Board * board, Piece * piece)
 100:Core/Src/board.c **** {
 658              		.loc 1 100 0
 659              		.cfi_startproc
 660              		@ args = 0, pretend = 0, frame = 0
 661              		@ frame_needed = 0, uses_anonymous_args = 0
 662              	.LVL67:
 663 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 664              	.LCFI17:
 665              		.cfi_def_cfa_offset 24
 666              		.cfi_offset 4, -24
 667              		.cfi_offset 5, -20
 668              		.cfi_offset 6, -16
 669              		.cfi_offset 7, -12
 670              		.cfi_offset 8, -8
 671              		.cfi_offset 14, -4
 672 0004 84B0     		sub	sp, sp, #16
 673              	.LCFI18:
 674              		.cfi_def_cfa_offset 40
 675 0006 0546     		mov	r5, r0
 676 0008 0C46     		mov	r4, r1
 101:Core/Src/board.c ****     int i = getPosX(piece);
 677              		.loc 1 101 0
 678 000a 0846     		mov	r0, r1
ARM GAS  /tmp/ccuTCLvw.s 			page 15


 679              	.LVL68:
 680 000c FFF7FEFF 		bl	getPosX
 681              	.LVL69:
 682 0010 0646     		mov	r6, r0
 683              	.LVL70:
 102:Core/Src/board.c ****     int j = getPosY(piece);
 684              		.loc 1 102 0
 685 0012 2046     		mov	r0, r4
 686              	.LVL71:
 687 0014 FFF7FEFF 		bl	getPosY
 688              	.LVL72:
 689 0018 0746     		mov	r7, r0
 690              	.LVL73:
 103:Core/Src/board.c ****  
 104:Core/Src/board.c ****     int k = getKind(piece);
 691              		.loc 1 104 0
 692 001a 2046     		mov	r0, r4
 693              	.LVL74:
 694 001c FFF7FEFF 		bl	getKind
 695              	.LVL75:
 696 0020 8046     		mov	r8, r0
 697              	.LVL76:
 105:Core/Src/board.c ****     int o = getOrientation(piece);
 698              		.loc 1 105 0
 699 0022 2046     		mov	r0, r4
 700              	.LVL77:
 701 0024 FFF7FEFF 		bl	getOrientation
 702              	.LVL78:
 106:Core/Src/board.c ****  
 107:Core/Src/board.c ****     floodFill(board, i, j, PIVOT_X, PIVOT_Y, k, o, FREE);
 703              		.loc 1 107 0
 704 0028 0023     		movs	r3, #0
 705 002a 0393     		str	r3, [sp, #12]
 706 002c 0290     		str	r0, [sp, #8]
 707 002e CDF80480 		str	r8, [sp, #4]
 708 0032 0223     		movs	r3, #2
 709 0034 0093     		str	r3, [sp]
 710 0036 0123     		movs	r3, #1
 711 0038 3A46     		mov	r2, r7
 712 003a 3146     		mov	r1, r6
 713 003c 2846     		mov	r0, r5
 714              	.LVL79:
 715 003e FFF7FEFF 		bl	floodFill
 716              	.LVL80:
 108:Core/Src/board.c **** }
 717              		.loc 1 108 0
 718 0042 04B0     		add	sp, sp, #16
 719              	.LCFI19:
 720              		.cfi_def_cfa_offset 24
 721              		@ sp needed
 722 0044 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 723              		.cfi_endproc
 724              	.LFE740:
 726              		.section	.text.setCurrentPiece,"ax",%progbits
 727              		.align	1
 728              		.global	setCurrentPiece
 729              		.syntax unified
ARM GAS  /tmp/ccuTCLvw.s 			page 16


 730              		.thumb
 731              		.thumb_func
 732              		.fpu fpv4-sp-d16
 734              	setCurrentPiece:
 735              	.LFB742:
 109:Core/Src/board.c ****  
 110:Core/Src/board.c **** void newPiece(Board * board, Piece * piece)
 111:Core/Src/board.c **** {
 112:Core/Src/board.c ****         
 113:Core/Src/board.c ****     setPosX(piece, ORIGIN_X);
 114:Core/Src/board.c ****     setPosY(piece, ORIGIN_Y);
 115:Core/Src/board.c ****  
 116:Core/Src/board.c ****     drawPiece(board, piece);
 117:Core/Src/board.c ****     setCurrentPiece(board, piece);
 118:Core/Src/board.c **** }
 119:Core/Src/board.c **** 
 120:Core/Src/board.c **** void setCurrentPiece(Board * board, Piece * piece)
 121:Core/Src/board.c **** {
 736              		.loc 1 121 0
 737              		.cfi_startproc
 738              		@ args = 0, pretend = 0, frame = 0
 739              		@ frame_needed = 0, uses_anonymous_args = 0
 740              		@ link register save eliminated.
 741              	.LVL81:
 122:Core/Src/board.c ****     board->currentPiece = piece;
 742              		.loc 1 122 0
 743 0000 0160     		str	r1, [r0]
 744 0002 7047     		bx	lr
 745              		.cfi_endproc
 746              	.LFE742:
 748              		.section	.text.newPiece,"ax",%progbits
 749              		.align	1
 750              		.global	newPiece
 751              		.syntax unified
 752              		.thumb
 753              		.thumb_func
 754              		.fpu fpv4-sp-d16
 756              	newPiece:
 757              	.LFB741:
 111:Core/Src/board.c ****         
 758              		.loc 1 111 0
 759              		.cfi_startproc
 760              		@ args = 0, pretend = 0, frame = 0
 761              		@ frame_needed = 0, uses_anonymous_args = 0
 762              	.LVL82:
 763 0000 38B5     		push	{r3, r4, r5, lr}
 764              	.LCFI20:
 765              		.cfi_def_cfa_offset 16
 766              		.cfi_offset 3, -16
 767              		.cfi_offset 4, -12
 768              		.cfi_offset 5, -8
 769              		.cfi_offset 14, -4
 770 0002 0546     		mov	r5, r0
 771 0004 0C46     		mov	r4, r1
 113:Core/Src/board.c ****     setPosY(piece, ORIGIN_Y);
 772              		.loc 1 113 0
 773 0006 0021     		movs	r1, #0
ARM GAS  /tmp/ccuTCLvw.s 			page 17


 774              	.LVL83:
 775 0008 2046     		mov	r0, r4
 776              	.LVL84:
 777 000a FFF7FEFF 		bl	setPosX
 778              	.LVL85:
 114:Core/Src/board.c ****  
 779              		.loc 1 114 0
 780 000e 0521     		movs	r1, #5
 781 0010 2046     		mov	r0, r4
 782 0012 FFF7FEFF 		bl	setPosY
 783              	.LVL86:
 116:Core/Src/board.c ****     setCurrentPiece(board, piece);
 784              		.loc 1 116 0
 785 0016 2146     		mov	r1, r4
 786 0018 2846     		mov	r0, r5
 787 001a FFF7FEFF 		bl	drawPiece
 788              	.LVL87:
 117:Core/Src/board.c **** }
 789              		.loc 1 117 0
 790 001e 2146     		mov	r1, r4
 791 0020 2846     		mov	r0, r5
 792 0022 FFF7FEFF 		bl	setCurrentPiece
 793              	.LVL88:
 794 0026 38BD     		pop	{r3, r4, r5, pc}
 795              		.cfi_endproc
 796              	.LFE741:
 798              		.section	.text.getCurrentPiece,"ax",%progbits
 799              		.align	1
 800              		.global	getCurrentPiece
 801              		.syntax unified
 802              		.thumb
 803              		.thumb_func
 804              		.fpu fpv4-sp-d16
 806              	getCurrentPiece:
 807              	.LFB743:
 123:Core/Src/board.c **** }
 124:Core/Src/board.c ****  
 125:Core/Src/board.c **** Piece * getCurrentPiece(Board * board)
 126:Core/Src/board.c **** {
 808              		.loc 1 126 0
 809              		.cfi_startproc
 810              		@ args = 0, pretend = 0, frame = 0
 811              		@ frame_needed = 0, uses_anonymous_args = 0
 812              		@ link register save eliminated.
 813              	.LVL89:
 127:Core/Src/board.c ****     return board->currentPiece;
 128:Core/Src/board.c **** }
 814              		.loc 1 128 0
 815 0000 0068     		ldr	r0, [r0]
 816              	.LVL90:
 817 0002 7047     		bx	lr
 818              		.cfi_endproc
 819              	.LFE743:
 821              		.section	.text.isCurrentPieceMovable,"ax",%progbits
 822              		.align	1
 823              		.global	isCurrentPieceMovable
 824              		.syntax unified
ARM GAS  /tmp/ccuTCLvw.s 			page 18


 825              		.thumb
 826              		.thumb_func
 827              		.fpu fpv4-sp-d16
 829              	isCurrentPieceMovable:
 830              	.LFB744:
 129:Core/Src/board.c ****  
 130:Core/Src/board.c **** bool isCurrentPieceMovable(Board * board, int x, int y)
 131:Core/Src/board.c **** {
 831              		.loc 1 131 0
 832              		.cfi_startproc
 833              		@ args = 0, pretend = 0, frame = 72
 834              		@ frame_needed = 0, uses_anonymous_args = 0
 835              	.LVL91:
 836 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 837              	.LCFI21:
 838              		.cfi_def_cfa_offset 20
 839              		.cfi_offset 4, -20
 840              		.cfi_offset 5, -16
 841              		.cfi_offset 6, -12
 842              		.cfi_offset 7, -8
 843              		.cfi_offset 14, -4
 844 0002 99B0     		sub	sp, sp, #100
 845              	.LCFI22:
 846              		.cfi_def_cfa_offset 120
 847 0004 0446     		mov	r4, r0
 848 0006 0D46     		mov	r5, r1
 849 0008 1646     		mov	r6, r2
 132:Core/Src/board.c ****     clearPiece(board, board->currentPiece);
 850              		.loc 1 132 0
 851 000a 0168     		ldr	r1, [r0]
 852              	.LVL92:
 853 000c FFF7FEFF 		bl	clearPiece
 854              	.LVL93:
 133:Core/Src/board.c ****  
 134:Core/Src/board.c ****     bool movable = true;
 855              		.loc 1 134 0
 856 0010 0123     		movs	r3, #1
 857 0012 1793     		str	r3, [sp, #92]
 858              	.LVL94:
 859              	.LBB6:
 135:Core/Src/board.c ****  
 136:Core/Src/board.c ****     bool visited[SIZE][SIZE];
 137:Core/Src/board.c ****  
 138:Core/Src/board.c ****     for(int l = 0; l < SIZE; ++l)
 860              		.loc 1 138 0
 861 0014 0020     		movs	r0, #0
 862 0016 0BE0     		b	.L46
 863              	.LVL95:
 864              	.L47:
 865              	.LBB7:
 139:Core/Src/board.c ****         for(int m = 0; m < SIZE; ++m)
 140:Core/Src/board.c ****             visited[l][m] = false;
 866              		.loc 1 140 0 discriminator 3
 867 0018 03EB8002 		add	r2, r3, r0, lsl #2
 868 001c 18A9     		add	r1, sp, #96
 869 001e 01EB8202 		add	r2, r1, r2, lsl #2
 870 0022 0021     		movs	r1, #0
ARM GAS  /tmp/ccuTCLvw.s 			page 19


 871 0024 42F8441C 		str	r1, [r2, #-68]
 139:Core/Src/board.c ****         for(int m = 0; m < SIZE; ++m)
 872              		.loc 1 139 0 discriminator 3
 873 0028 0133     		adds	r3, r3, #1
 874              	.LVL96:
 875              	.L48:
 139:Core/Src/board.c ****         for(int m = 0; m < SIZE; ++m)
 876              		.loc 1 139 0 is_stmt 0 discriminator 1
 877 002a 032B     		cmp	r3, #3
 878 002c F4DD     		ble	.L47
 879              	.LBE7:
 138:Core/Src/board.c ****         for(int m = 0; m < SIZE; ++m)
 880              		.loc 1 138 0 is_stmt 1 discriminator 2
 881 002e 0130     		adds	r0, r0, #1
 882              	.LVL97:
 883              	.L46:
 138:Core/Src/board.c ****         for(int m = 0; m < SIZE; ++m)
 884              		.loc 1 138 0 is_stmt 0 discriminator 1
 885 0030 0328     		cmp	r0, #3
 886 0032 01DC     		bgt	.L51
 887 0034 0023     		movs	r3, #0
 888 0036 F8E7     		b	.L48
 889              	.L51:
 890              	.LBE6:
 141:Core/Src/board.c ****  
 142:Core/Src/board.c ****     int k = getKind(board->currentPiece);
 891              		.loc 1 142 0 is_stmt 1
 892 0038 2068     		ldr	r0, [r4]
 893              	.LVL98:
 894 003a FFF7FEFF 		bl	getKind
 895              	.LVL99:
 896 003e 0746     		mov	r7, r0
 897              	.LVL100:
 143:Core/Src/board.c ****     int o = getOrientation(board->currentPiece);
 898              		.loc 1 143 0
 899 0040 2068     		ldr	r0, [r4]
 900              	.LVL101:
 901 0042 FFF7FEFF 		bl	getOrientation
 902              	.LVL102:
 144:Core/Src/board.c ****  
 145:Core/Src/board.c ****     floodB(board, x, y, PIVOT_X, PIVOT_Y, k, o, &movable, visited);
 903              		.loc 1 145 0
 904 0046 07AB     		add	r3, sp, #28
 905 0048 0493     		str	r3, [sp, #16]
 906 004a 17AB     		add	r3, sp, #92
 907 004c 0393     		str	r3, [sp, #12]
 908 004e 0290     		str	r0, [sp, #8]
 909 0050 0197     		str	r7, [sp, #4]
 910 0052 0223     		movs	r3, #2
 911 0054 0093     		str	r3, [sp]
 912 0056 0123     		movs	r3, #1
 913 0058 3246     		mov	r2, r6
 914 005a 2946     		mov	r1, r5
 915 005c 2046     		mov	r0, r4
 916              	.LVL103:
 917 005e FFF7FEFF 		bl	floodB
 918              	.LVL104:
ARM GAS  /tmp/ccuTCLvw.s 			page 20


 146:Core/Src/board.c ****  
 147:Core/Src/board.c ****     drawPiece(board, board->currentPiece);
 919              		.loc 1 147 0
 920 0062 2168     		ldr	r1, [r4]
 921 0064 2046     		mov	r0, r4
 922 0066 FFF7FEFF 		bl	drawPiece
 923              	.LVL105:
 148:Core/Src/board.c ****  
 149:Core/Src/board.c ****     return movable;
 150:Core/Src/board.c **** }
 924              		.loc 1 150 0
 925 006a 1798     		ldr	r0, [sp, #92]
 926 006c 19B0     		add	sp, sp, #100
 927              	.LCFI23:
 928              		.cfi_def_cfa_offset 20
 929              		@ sp needed
 930 006e F0BD     		pop	{r4, r5, r6, r7, pc}
 931              		.cfi_endproc
 932              	.LFE744:
 934              		.section	.text.isCurrentPieceRotable,"ax",%progbits
 935              		.align	1
 936              		.global	isCurrentPieceRotable
 937              		.syntax unified
 938              		.thumb
 939              		.thumb_func
 940              		.fpu fpv4-sp-d16
 942              	isCurrentPieceRotable:
 943              	.LFB745:
 151:Core/Src/board.c ****  
 152:Core/Src/board.c **** bool isCurrentPieceRotable(Board * board, int o)
 153:Core/Src/board.c **** {
 944              		.loc 1 153 0
 945              		.cfi_startproc
 946              		@ args = 0, pretend = 0, frame = 72
 947              		@ frame_needed = 0, uses_anonymous_args = 0
 948              	.LVL106:
 949 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 950              	.LCFI24:
 951              		.cfi_def_cfa_offset 20
 952              		.cfi_offset 4, -20
 953              		.cfi_offset 5, -16
 954              		.cfi_offset 6, -12
 955              		.cfi_offset 7, -8
 956              		.cfi_offset 14, -4
 957 0002 99B0     		sub	sp, sp, #100
 958              	.LCFI25:
 959              		.cfi_def_cfa_offset 120
 960 0004 0446     		mov	r4, r0
 961 0006 0E46     		mov	r6, r1
 154:Core/Src/board.c ****     clearPiece(board, board->currentPiece);
 962              		.loc 1 154 0
 963 0008 0168     		ldr	r1, [r0]
 964              	.LVL107:
 965 000a FFF7FEFF 		bl	clearPiece
 966              	.LVL108:
 155:Core/Src/board.c ****  
 156:Core/Src/board.c ****     bool rotable = true;
ARM GAS  /tmp/ccuTCLvw.s 			page 21


 967              		.loc 1 156 0
 968 000e 0123     		movs	r3, #1
 969 0010 1793     		str	r3, [sp, #92]
 970              	.LVL109:
 971              	.LBB8:
 157:Core/Src/board.c ****  
 158:Core/Src/board.c ****     bool visited[SIZE][SIZE];
 159:Core/Src/board.c ****  
 160:Core/Src/board.c ****     for(int i = 0; i < SIZE; ++i)
 972              		.loc 1 160 0
 973 0012 0020     		movs	r0, #0
 974 0014 0BE0     		b	.L53
 975              	.LVL110:
 976              	.L54:
 977              	.LBB9:
 161:Core/Src/board.c ****         for(int j = 0; j < SIZE; ++j)
 162:Core/Src/board.c ****             visited[i][j] = false;
 978              		.loc 1 162 0 discriminator 3
 979 0016 03EB8002 		add	r2, r3, r0, lsl #2
 980 001a 18A9     		add	r1, sp, #96
 981 001c 01EB8202 		add	r2, r1, r2, lsl #2
 982 0020 0021     		movs	r1, #0
 983 0022 42F8441C 		str	r1, [r2, #-68]
 161:Core/Src/board.c ****         for(int j = 0; j < SIZE; ++j)
 984              		.loc 1 161 0 discriminator 3
 985 0026 0133     		adds	r3, r3, #1
 986              	.LVL111:
 987              	.L55:
 161:Core/Src/board.c ****         for(int j = 0; j < SIZE; ++j)
 988              		.loc 1 161 0 is_stmt 0 discriminator 1
 989 0028 032B     		cmp	r3, #3
 990 002a F4DD     		ble	.L54
 991              	.LBE9:
 160:Core/Src/board.c ****         for(int j = 0; j < SIZE; ++j)
 992              		.loc 1 160 0 is_stmt 1 discriminator 2
 993 002c 0130     		adds	r0, r0, #1
 994              	.LVL112:
 995              	.L53:
 160:Core/Src/board.c ****         for(int j = 0; j < SIZE; ++j)
 996              		.loc 1 160 0 is_stmt 0 discriminator 1
 997 002e 0328     		cmp	r0, #3
 998 0030 01DC     		bgt	.L58
 999 0032 0023     		movs	r3, #0
 1000 0034 F8E7     		b	.L55
 1001              	.L58:
 1002              	.LBE8:
 163:Core/Src/board.c ****  
 164:Core/Src/board.c ****     int k = getKind(board->currentPiece);
 1003              		.loc 1 164 0 is_stmt 1
 1004 0036 2068     		ldr	r0, [r4]
 1005              	.LVL113:
 1006 0038 FFF7FEFF 		bl	getKind
 1007              	.LVL114:
 1008 003c 0746     		mov	r7, r0
 1009              	.LVL115:
 165:Core/Src/board.c ****  
 166:Core/Src/board.c ****     floodB(board, getPosX(board->currentPiece), getPosY(board->currentPiece), PIVOT_X, PIVOT_Y, k, 
ARM GAS  /tmp/ccuTCLvw.s 			page 22


 1010              		.loc 1 166 0
 1011 003e 2068     		ldr	r0, [r4]
 1012              	.LVL116:
 1013 0040 FFF7FEFF 		bl	getPosX
 1014              	.LVL117:
 1015 0044 0546     		mov	r5, r0
 1016 0046 2068     		ldr	r0, [r4]
 1017 0048 FFF7FEFF 		bl	getPosY
 1018              	.LVL118:
 1019 004c 07AB     		add	r3, sp, #28
 1020 004e 0493     		str	r3, [sp, #16]
 1021 0050 17AB     		add	r3, sp, #92
 1022 0052 0393     		str	r3, [sp, #12]
 1023 0054 0296     		str	r6, [sp, #8]
 1024 0056 0197     		str	r7, [sp, #4]
 1025 0058 0223     		movs	r3, #2
 1026 005a 0093     		str	r3, [sp]
 1027 005c 0123     		movs	r3, #1
 1028 005e 0246     		mov	r2, r0
 1029 0060 2946     		mov	r1, r5
 1030 0062 2046     		mov	r0, r4
 1031 0064 FFF7FEFF 		bl	floodB
 1032              	.LVL119:
 167:Core/Src/board.c ****  
 168:Core/Src/board.c ****     drawPiece(board, board->currentPiece);
 1033              		.loc 1 168 0
 1034 0068 2168     		ldr	r1, [r4]
 1035 006a 2046     		mov	r0, r4
 1036 006c FFF7FEFF 		bl	drawPiece
 1037              	.LVL120:
 169:Core/Src/board.c ****  
 170:Core/Src/board.c ****     return rotable;
 171:Core/Src/board.c **** }
 1038              		.loc 1 171 0
 1039 0070 1798     		ldr	r0, [sp, #92]
 1040 0072 19B0     		add	sp, sp, #100
 1041              	.LCFI26:
 1042              		.cfi_def_cfa_offset 20
 1043              		@ sp needed
 1044 0074 F0BD     		pop	{r4, r5, r6, r7, pc}
 1045              		.cfi_endproc
 1046              	.LFE745:
 1048              		.section	.text.moveCurrentPieceDown,"ax",%progbits
 1049              		.align	1
 1050              		.global	moveCurrentPieceDown
 1051              		.syntax unified
 1052              		.thumb
 1053              		.thumb_func
 1054              		.fpu fpv4-sp-d16
 1056              	moveCurrentPieceDown:
 1057              	.LFB746:
 172:Core/Src/board.c ****  
 173:Core/Src/board.c **** void moveCurrentPieceDown(Board * board)
 174:Core/Src/board.c **** {
 1058              		.loc 1 174 0
 1059              		.cfi_startproc
 1060              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /tmp/ccuTCLvw.s 			page 23


 1061              		@ frame_needed = 0, uses_anonymous_args = 0
 1062              	.LVL121:
 1063 0000 38B5     		push	{r3, r4, r5, lr}
 1064              	.LCFI27:
 1065              		.cfi_def_cfa_offset 16
 1066              		.cfi_offset 3, -16
 1067              		.cfi_offset 4, -12
 1068              		.cfi_offset 5, -8
 1069              		.cfi_offset 14, -4
 1070 0002 0446     		mov	r4, r0
 175:Core/Src/board.c ****     int x = getPosX(board->currentPiece);
 1071              		.loc 1 175 0
 1072 0004 0068     		ldr	r0, [r0]
 1073              	.LVL122:
 1074 0006 FFF7FEFF 		bl	getPosX
 1075              	.LVL123:
 1076 000a 0546     		mov	r5, r0
 1077              	.LVL124:
 176:Core/Src/board.c ****     int y = getPosY(board->currentPiece);
 1078              		.loc 1 176 0
 1079 000c 2068     		ldr	r0, [r4]
 1080              	.LVL125:
 1081 000e FFF7FEFF 		bl	getPosY
 1082              	.LVL126:
 177:Core/Src/board.c ****  
 178:Core/Src/board.c ****     if(isCurrentPieceMovable(board, x + 1, y))
 1083              		.loc 1 178 0
 1084 0012 0135     		adds	r5, r5, #1
 1085              	.LVL127:
 1086 0014 0246     		mov	r2, r0
 1087 0016 2946     		mov	r1, r5
 1088 0018 2046     		mov	r0, r4
 1089              	.LVL128:
 1090 001a FFF7FEFF 		bl	isCurrentPieceMovable
 1091              	.LVL129:
 1092 001e 00B9     		cbnz	r0, .L62
 1093              	.L59:
 1094 0020 38BD     		pop	{r3, r4, r5, pc}
 1095              	.LVL130:
 1096              	.L62:
 179:Core/Src/board.c ****     {
 180:Core/Src/board.c ****         clearPiece(board, board->currentPiece);
 1097              		.loc 1 180 0
 1098 0022 2168     		ldr	r1, [r4]
 1099 0024 2046     		mov	r0, r4
 1100 0026 FFF7FEFF 		bl	clearPiece
 1101              	.LVL131:
 181:Core/Src/board.c ****         setPosX(board->currentPiece, x + 1);
 1102              		.loc 1 181 0
 1103 002a 2946     		mov	r1, r5
 1104 002c 2068     		ldr	r0, [r4]
 1105 002e FFF7FEFF 		bl	setPosX
 1106              	.LVL132:
 182:Core/Src/board.c ****  
 183:Core/Src/board.c ****         drawPiece(board, board->currentPiece);
 1107              		.loc 1 183 0
 1108 0032 2168     		ldr	r1, [r4]
ARM GAS  /tmp/ccuTCLvw.s 			page 24


 1109 0034 2046     		mov	r0, r4
 1110 0036 FFF7FEFF 		bl	drawPiece
 1111              	.LVL133:
 184:Core/Src/board.c ****     }
 185:Core/Src/board.c **** }
 1112              		.loc 1 185 0
 1113 003a F1E7     		b	.L59
 1114              		.cfi_endproc
 1115              	.LFE746:
 1117              		.section	.text.moveCurrentPieceLeft,"ax",%progbits
 1118              		.align	1
 1119              		.global	moveCurrentPieceLeft
 1120              		.syntax unified
 1121              		.thumb
 1122              		.thumb_func
 1123              		.fpu fpv4-sp-d16
 1125              	moveCurrentPieceLeft:
 1126              	.LFB748:
 186:Core/Src/board.c **** 
 187:Core/Src/board.c **** int moveCurrentPieceDownBot(Board * board)
 188:Core/Src/board.c **** {
 189:Core/Src/board.c ****     if(isCurrentPieceFallen(board)){
 190:Core/Src/board.c ****         return 0;
 191:Core/Src/board.c ****     }
 192:Core/Src/board.c ****     
 193:Core/Src/board.c ****     moveCurrentPieceDown(board);
 194:Core/Src/board.c ****     return 1;
 195:Core/Src/board.c **** }
 196:Core/Src/board.c ****  
 197:Core/Src/board.c **** void moveCurrentPieceLeft(Board * board)
 198:Core/Src/board.c **** {
 1127              		.loc 1 198 0
 1128              		.cfi_startproc
 1129              		@ args = 0, pretend = 0, frame = 0
 1130              		@ frame_needed = 0, uses_anonymous_args = 0
 1131              	.LVL134:
 1132 0000 70B5     		push	{r4, r5, r6, lr}
 1133              	.LCFI28:
 1134              		.cfi_def_cfa_offset 16
 1135              		.cfi_offset 4, -16
 1136              		.cfi_offset 5, -12
 1137              		.cfi_offset 6, -8
 1138              		.cfi_offset 14, -4
 1139 0002 0446     		mov	r4, r0
 199:Core/Src/board.c ****     int x = getPosX(board->currentPiece);
 1140              		.loc 1 199 0
 1141 0004 0068     		ldr	r0, [r0]
 1142              	.LVL135:
 1143 0006 FFF7FEFF 		bl	getPosX
 1144              	.LVL136:
 1145 000a 0646     		mov	r6, r0
 1146              	.LVL137:
 200:Core/Src/board.c ****     int y = getPosY(board->currentPiece);
 1147              		.loc 1 200 0
 1148 000c 2068     		ldr	r0, [r4]
 1149              	.LVL138:
 1150 000e FFF7FEFF 		bl	getPosY
ARM GAS  /tmp/ccuTCLvw.s 			page 25


 1151              	.LVL139:
 201:Core/Src/board.c ****  
 202:Core/Src/board.c ****     if(isCurrentPieceMovable(board, x, y - 1))
 1152              		.loc 1 202 0
 1153 0012 451E     		subs	r5, r0, #1
 1154 0014 2A46     		mov	r2, r5
 1155 0016 3146     		mov	r1, r6
 1156 0018 2046     		mov	r0, r4
 1157              	.LVL140:
 1158 001a FFF7FEFF 		bl	isCurrentPieceMovable
 1159              	.LVL141:
 1160 001e 00B9     		cbnz	r0, .L66
 1161              	.L63:
 1162 0020 70BD     		pop	{r4, r5, r6, pc}
 1163              	.LVL142:
 1164              	.L66:
 203:Core/Src/board.c ****     {
 204:Core/Src/board.c ****         clearPiece(board, board->currentPiece);
 1165              		.loc 1 204 0
 1166 0022 2168     		ldr	r1, [r4]
 1167 0024 2046     		mov	r0, r4
 1168 0026 FFF7FEFF 		bl	clearPiece
 1169              	.LVL143:
 205:Core/Src/board.c ****         setPosY(board->currentPiece, y - 1);
 1170              		.loc 1 205 0
 1171 002a 2946     		mov	r1, r5
 1172 002c 2068     		ldr	r0, [r4]
 1173 002e FFF7FEFF 		bl	setPosY
 1174              	.LVL144:
 206:Core/Src/board.c ****  
 207:Core/Src/board.c ****         drawPiece(board, board->currentPiece);
 1175              		.loc 1 207 0
 1176 0032 2168     		ldr	r1, [r4]
 1177 0034 2046     		mov	r0, r4
 1178 0036 FFF7FEFF 		bl	drawPiece
 1179              	.LVL145:
 208:Core/Src/board.c ****     }
 209:Core/Src/board.c **** }
 1180              		.loc 1 209 0
 1181 003a F1E7     		b	.L63
 1182              		.cfi_endproc
 1183              	.LFE748:
 1185              		.section	.text.moveCurrentPieceRight,"ax",%progbits
 1186              		.align	1
 1187              		.global	moveCurrentPieceRight
 1188              		.syntax unified
 1189              		.thumb
 1190              		.thumb_func
 1191              		.fpu fpv4-sp-d16
 1193              	moveCurrentPieceRight:
 1194              	.LFB749:
 210:Core/Src/board.c ****  
 211:Core/Src/board.c **** void moveCurrentPieceRight(Board * board)
 212:Core/Src/board.c **** {
 1195              		.loc 1 212 0
 1196              		.cfi_startproc
 1197              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /tmp/ccuTCLvw.s 			page 26


 1198              		@ frame_needed = 0, uses_anonymous_args = 0
 1199              	.LVL146:
 1200 0000 70B5     		push	{r4, r5, r6, lr}
 1201              	.LCFI29:
 1202              		.cfi_def_cfa_offset 16
 1203              		.cfi_offset 4, -16
 1204              		.cfi_offset 5, -12
 1205              		.cfi_offset 6, -8
 1206              		.cfi_offset 14, -4
 1207 0002 0446     		mov	r4, r0
 213:Core/Src/board.c ****     int x = getPosX(board->currentPiece);
 1208              		.loc 1 213 0
 1209 0004 0068     		ldr	r0, [r0]
 1210              	.LVL147:
 1211 0006 FFF7FEFF 		bl	getPosX
 1212              	.LVL148:
 1213 000a 0646     		mov	r6, r0
 1214              	.LVL149:
 214:Core/Src/board.c ****     int y = getPosY(board->currentPiece);
 1215              		.loc 1 214 0
 1216 000c 2068     		ldr	r0, [r4]
 1217              	.LVL150:
 1218 000e FFF7FEFF 		bl	getPosY
 1219              	.LVL151:
 215:Core/Src/board.c ****  
 216:Core/Src/board.c ****     if(isCurrentPieceMovable(board, x, y + 1))
 1220              		.loc 1 216 0
 1221 0012 451C     		adds	r5, r0, #1
 1222 0014 2A46     		mov	r2, r5
 1223 0016 3146     		mov	r1, r6
 1224 0018 2046     		mov	r0, r4
 1225              	.LVL152:
 1226 001a FFF7FEFF 		bl	isCurrentPieceMovable
 1227              	.LVL153:
 1228 001e 00B9     		cbnz	r0, .L70
 1229              	.L67:
 1230 0020 70BD     		pop	{r4, r5, r6, pc}
 1231              	.LVL154:
 1232              	.L70:
 217:Core/Src/board.c ****     {
 218:Core/Src/board.c ****         clearPiece(board, board->currentPiece);
 1233              		.loc 1 218 0
 1234 0022 2168     		ldr	r1, [r4]
 1235 0024 2046     		mov	r0, r4
 1236 0026 FFF7FEFF 		bl	clearPiece
 1237              	.LVL155:
 219:Core/Src/board.c ****         setPosY(board->currentPiece, y + 1);
 1238              		.loc 1 219 0
 1239 002a 2946     		mov	r1, r5
 1240 002c 2068     		ldr	r0, [r4]
 1241 002e FFF7FEFF 		bl	setPosY
 1242              	.LVL156:
 220:Core/Src/board.c ****  
 221:Core/Src/board.c ****         drawPiece(board, board->currentPiece);
 1243              		.loc 1 221 0
 1244 0032 2168     		ldr	r1, [r4]
 1245 0034 2046     		mov	r0, r4
ARM GAS  /tmp/ccuTCLvw.s 			page 27


 1246 0036 FFF7FEFF 		bl	drawPiece
 1247              	.LVL157:
 222:Core/Src/board.c ****     }
 223:Core/Src/board.c **** }
 1248              		.loc 1 223 0
 1249 003a F1E7     		b	.L67
 1250              		.cfi_endproc
 1251              	.LFE749:
 1253              		.section	.text.rotateCurrentPieceLeft,"ax",%progbits
 1254              		.align	1
 1255              		.global	rotateCurrentPieceLeft
 1256              		.syntax unified
 1257              		.thumb
 1258              		.thumb_func
 1259              		.fpu fpv4-sp-d16
 1261              	rotateCurrentPieceLeft:
 1262              	.LFB750:
 224:Core/Src/board.c ****  
 225:Core/Src/board.c **** void rotateCurrentPieceLeft(Board * board)
 226:Core/Src/board.c **** {
 1263              		.loc 1 226 0
 1264              		.cfi_startproc
 1265              		@ args = 0, pretend = 0, frame = 0
 1266              		@ frame_needed = 0, uses_anonymous_args = 0
 1267              	.LVL158:
 1268 0000 38B5     		push	{r3, r4, r5, lr}
 1269              	.LCFI30:
 1270              		.cfi_def_cfa_offset 16
 1271              		.cfi_offset 3, -16
 1272              		.cfi_offset 4, -12
 1273              		.cfi_offset 5, -8
 1274              		.cfi_offset 14, -4
 1275 0002 0446     		mov	r4, r0
 227:Core/Src/board.c ****     int o = getOrientation(board->currentPiece);
 1276              		.loc 1 227 0
 1277 0004 0068     		ldr	r0, [r0]
 1278              	.LVL159:
 1279 0006 FFF7FEFF 		bl	getOrientation
 1280              	.LVL160:
 228:Core/Src/board.c ****  
 229:Core/Src/board.c ****     if(o > 0)
 1281              		.loc 1 229 0
 1282 000a 0028     		cmp	r0, #0
 1283 000c 06DD     		ble	.L74
 230:Core/Src/board.c ****         o--;
 1284              		.loc 1 230 0
 1285 000e 451E     		subs	r5, r0, #1
 1286              	.LVL161:
 1287              	.L72:
 231:Core/Src/board.c ****     else
 232:Core/Src/board.c ****         o = NB_ROTATIONS - 1;
 233:Core/Src/board.c ****  
 234:Core/Src/board.c ****     if(isCurrentPieceRotable(board, o))
 1288              		.loc 1 234 0
 1289 0010 2946     		mov	r1, r5
 1290 0012 2046     		mov	r0, r4
 1291 0014 FFF7FEFF 		bl	isCurrentPieceRotable
ARM GAS  /tmp/ccuTCLvw.s 			page 28


 1292              	.LVL162:
 1293 0018 10B9     		cbnz	r0, .L76
 1294              	.L71:
 1295 001a 38BD     		pop	{r3, r4, r5, pc}
 1296              	.LVL163:
 1297              	.L74:
 232:Core/Src/board.c ****  
 1298              		.loc 1 232 0
 1299 001c 0325     		movs	r5, #3
 1300 001e F7E7     		b	.L72
 1301              	.LVL164:
 1302              	.L76:
 235:Core/Src/board.c ****     {
 236:Core/Src/board.c ****         clearPiece(board, board->currentPiece);
 1303              		.loc 1 236 0
 1304 0020 2168     		ldr	r1, [r4]
 1305 0022 2046     		mov	r0, r4
 1306 0024 FFF7FEFF 		bl	clearPiece
 1307              	.LVL165:
 237:Core/Src/board.c ****  
 238:Core/Src/board.c ****         setOrientation(board->currentPiece, o);
 1308              		.loc 1 238 0
 1309 0028 2946     		mov	r1, r5
 1310 002a 2068     		ldr	r0, [r4]
 1311 002c FFF7FEFF 		bl	setOrientation
 1312              	.LVL166:
 239:Core/Src/board.c ****         drawPiece(board, board->currentPiece);
 1313              		.loc 1 239 0
 1314 0030 2168     		ldr	r1, [r4]
 1315 0032 2046     		mov	r0, r4
 1316 0034 FFF7FEFF 		bl	drawPiece
 1317              	.LVL167:
 240:Core/Src/board.c ****     }
 241:Core/Src/board.c **** }
 1318              		.loc 1 241 0
 1319 0038 EFE7     		b	.L71
 1320              		.cfi_endproc
 1321              	.LFE750:
 1323              		.section	.text.rotateCurrentPieceRight,"ax",%progbits
 1324              		.align	1
 1325              		.global	rotateCurrentPieceRight
 1326              		.syntax unified
 1327              		.thumb
 1328              		.thumb_func
 1329              		.fpu fpv4-sp-d16
 1331              	rotateCurrentPieceRight:
 1332              	.LFB751:
 242:Core/Src/board.c ****  
 243:Core/Src/board.c **** void rotateCurrentPieceRight(Board * board)
 244:Core/Src/board.c **** {
 1333              		.loc 1 244 0
 1334              		.cfi_startproc
 1335              		@ args = 0, pretend = 0, frame = 0
 1336              		@ frame_needed = 0, uses_anonymous_args = 0
 1337              	.LVL168:
 1338 0000 38B5     		push	{r3, r4, r5, lr}
 1339              	.LCFI31:
ARM GAS  /tmp/ccuTCLvw.s 			page 29


 1340              		.cfi_def_cfa_offset 16
 1341              		.cfi_offset 3, -16
 1342              		.cfi_offset 4, -12
 1343              		.cfi_offset 5, -8
 1344              		.cfi_offset 14, -4
 1345 0002 0446     		mov	r4, r0
 245:Core/Src/board.c ****     int o = getOrientation(board->currentPiece);
 1346              		.loc 1 245 0
 1347 0004 0068     		ldr	r0, [r0]
 1348              	.LVL169:
 1349 0006 FFF7FEFF 		bl	getOrientation
 1350              	.LVL170:
 246:Core/Src/board.c ****  
 247:Core/Src/board.c ****     if(o < NB_ROTATIONS - 1)
 1351              		.loc 1 247 0
 1352 000a 0228     		cmp	r0, #2
 1353 000c 06DC     		bgt	.L80
 248:Core/Src/board.c ****         o++;
 1354              		.loc 1 248 0
 1355 000e 451C     		adds	r5, r0, #1
 1356              	.LVL171:
 1357              	.L78:
 249:Core/Src/board.c ****     else
 250:Core/Src/board.c ****         o = 0;
 251:Core/Src/board.c ****  
 252:Core/Src/board.c ****     if(isCurrentPieceRotable(board, o))
 1358              		.loc 1 252 0
 1359 0010 2946     		mov	r1, r5
 1360 0012 2046     		mov	r0, r4
 1361 0014 FFF7FEFF 		bl	isCurrentPieceRotable
 1362              	.LVL172:
 1363 0018 10B9     		cbnz	r0, .L82
 1364              	.L77:
 1365 001a 38BD     		pop	{r3, r4, r5, pc}
 1366              	.LVL173:
 1367              	.L80:
 250:Core/Src/board.c ****  
 1368              		.loc 1 250 0
 1369 001c 0025     		movs	r5, #0
 1370 001e F7E7     		b	.L78
 1371              	.LVL174:
 1372              	.L82:
 253:Core/Src/board.c ****     {
 254:Core/Src/board.c ****         clearPiece(board, board->currentPiece);
 1373              		.loc 1 254 0
 1374 0020 2168     		ldr	r1, [r4]
 1375 0022 2046     		mov	r0, r4
 1376 0024 FFF7FEFF 		bl	clearPiece
 1377              	.LVL175:
 255:Core/Src/board.c ****         setOrientation(board->currentPiece, o);
 1378              		.loc 1 255 0
 1379 0028 2946     		mov	r1, r5
 1380 002a 2068     		ldr	r0, [r4]
 1381 002c FFF7FEFF 		bl	setOrientation
 1382              	.LVL176:
 256:Core/Src/board.c ****  
 257:Core/Src/board.c ****         drawPiece(board, board->currentPiece);
ARM GAS  /tmp/ccuTCLvw.s 			page 30


 1383              		.loc 1 257 0
 1384 0030 2168     		ldr	r1, [r4]
 1385 0032 2046     		mov	r0, r4
 1386 0034 FFF7FEFF 		bl	drawPiece
 1387              	.LVL177:
 258:Core/Src/board.c ****     }
 259:Core/Src/board.c **** }
 1388              		.loc 1 259 0
 1389 0038 EFE7     		b	.L77
 1390              		.cfi_endproc
 1391              	.LFE751:
 1393              		.section	.text.deleteLine,"ax",%progbits
 1394              		.align	1
 1395              		.global	deleteLine
 1396              		.syntax unified
 1397              		.thumb
 1398              		.thumb_func
 1399              		.fpu fpv4-sp-d16
 1401              	deleteLine:
 1402              	.LFB752:
 260:Core/Src/board.c ****  
 261:Core/Src/board.c **** void deleteLine(Board * board, int y)
 262:Core/Src/board.c **** {
 1403              		.loc 1 262 0
 1404              		.cfi_startproc
 1405              		@ args = 0, pretend = 0, frame = 0
 1406              		@ frame_needed = 0, uses_anonymous_args = 0
 1407              	.LVL178:
 1408 0000 70B5     		push	{r4, r5, r6, lr}
 1409              	.LCFI32:
 1410              		.cfi_def_cfa_offset 16
 1411              		.cfi_offset 4, -16
 1412              		.cfi_offset 5, -12
 1413              		.cfi_offset 6, -8
 1414              		.cfi_offset 14, -4
 1415 0002 0546     		mov	r5, r0
 1416 0004 0C46     		mov	r4, r1
 263:Core/Src/board.c ****     clearPiece(board, board->currentPiece);
 1417              		.loc 1 263 0
 1418 0006 0168     		ldr	r1, [r0]
 1419              	.LVL179:
 1420 0008 FFF7FEFF 		bl	clearPiece
 1421              	.LVL180:
 1422              	.LBB10:
 264:Core/Src/board.c ****  
 265:Core/Src/board.c ****     for(int j = y; j > 0; --j)
 1423              		.loc 1 265 0
 1424 000c 10E0     		b	.L84
 1425              	.LVL181:
 1426              	.L85:
 1427              	.LBB11:
 266:Core/Src/board.c ****     {
 267:Core/Src/board.c ****         for(int i = 0; i < BOARD_WIDTH; ++i)
 268:Core/Src/board.c ****             board->area[i][j] = board->area[i][j-1];
 1428              		.loc 1 268 0 discriminator 3
 1429 000e 601E     		subs	r0, r4, #1
 1430 0010 9100     		lsls	r1, r2, #2
ARM GAS  /tmp/ccuTCLvw.s 			page 31


 1431 0012 8E18     		adds	r6, r1, r2
 1432 0014 B300     		lsls	r3, r6, #2
 1433 0016 0344     		add	r3, r3, r0
 1434 0018 05EB8303 		add	r3, r5, r3, lsl #2
 1435 001c 5868     		ldr	r0, [r3, #4]
 1436 001e B300     		lsls	r3, r6, #2
 1437 0020 2344     		add	r3, r3, r4
 1438 0022 05EB8303 		add	r3, r5, r3, lsl #2
 1439 0026 5860     		str	r0, [r3, #4]
 267:Core/Src/board.c ****             board->area[i][j] = board->area[i][j-1];
 1440              		.loc 1 267 0 discriminator 3
 1441 0028 0132     		adds	r2, r2, #1
 1442              	.LVL182:
 1443              	.L86:
 267:Core/Src/board.c ****             board->area[i][j] = board->area[i][j-1];
 1444              		.loc 1 267 0 is_stmt 0 discriminator 1
 1445 002a 092A     		cmp	r2, #9
 1446 002c EFDD     		ble	.L85
 1447              	.LBE11:
 265:Core/Src/board.c ****     {
 1448              		.loc 1 265 0 is_stmt 1 discriminator 2
 1449 002e 013C     		subs	r4, r4, #1
 1450              	.LVL183:
 1451              	.L84:
 265:Core/Src/board.c ****     {
 1452              		.loc 1 265 0 is_stmt 0 discriminator 1
 1453 0030 002C     		cmp	r4, #0
 1454 0032 01DD     		ble	.L89
 1455 0034 0022     		movs	r2, #0
 1456 0036 F8E7     		b	.L86
 1457              	.L89:
 1458              	.LBE10:
 269:Core/Src/board.c ****     }
 270:Core/Src/board.c ****  
 271:Core/Src/board.c ****     drawPiece(board, board->currentPiece);
 1459              		.loc 1 271 0 is_stmt 1
 1460 0038 2968     		ldr	r1, [r5]
 1461 003a 2846     		mov	r0, r5
 1462 003c FFF7FEFF 		bl	drawPiece
 1463              	.LVL184:
 1464 0040 70BD     		pop	{r4, r5, r6, pc}
 1465              		.cfi_endproc
 1466              	.LFE752:
 1468              		.section	.text.deletePossibleLines,"ax",%progbits
 1469              		.align	1
 1470              		.global	deletePossibleLines
 1471              		.syntax unified
 1472              		.thumb
 1473              		.thumb_func
 1474              		.fpu fpv4-sp-d16
 1476              	deletePossibleLines:
 1477              	.LFB753:
 272:Core/Src/board.c **** }
 273:Core/Src/board.c ****  
 274:Core/Src/board.c **** int deletePossibleLines(Board * board)
 275:Core/Src/board.c **** {
 1478              		.loc 1 275 0
ARM GAS  /tmp/ccuTCLvw.s 			page 32


 1479              		.cfi_startproc
 1480              		@ args = 0, pretend = 0, frame = 0
 1481              		@ frame_needed = 0, uses_anonymous_args = 0
 1482              	.LVL185:
 1483 0000 70B5     		push	{r4, r5, r6, lr}
 1484              	.LCFI33:
 1485              		.cfi_def_cfa_offset 16
 1486              		.cfi_offset 4, -16
 1487              		.cfi_offset 5, -12
 1488              		.cfi_offset 6, -8
 1489              		.cfi_offset 14, -4
 1490 0002 0546     		mov	r5, r0
 1491              	.LVL186:
 1492              	.LBB12:
 276:Core/Src/board.c ****     int nbLinesDeleted = 0;
 277:Core/Src/board.c ****  
 278:Core/Src/board.c ****     for(int j = 0; j < BOARD_HEIGHT; ++j)
 1493              		.loc 1 278 0
 1494 0004 0024     		movs	r4, #0
 1495              	.LBE12:
 276:Core/Src/board.c ****     int nbLinesDeleted = 0;
 1496              		.loc 1 276 0
 1497 0006 2646     		mov	r6, r4
 1498              	.LBB15:
 1499              		.loc 1 278 0
 1500 0008 0EE0     		b	.L91
 1501              	.LVL187:
 1502              	.L93:
 1503              	.LBB13:
 279:Core/Src/board.c ****     {
 280:Core/Src/board.c ****         int i = 0;
 281:Core/Src/board.c ****  
 282:Core/Src/board.c ****         for(; i < BOARD_WIDTH && board->area[i][j] != FREE; ++i);
 1504              		.loc 1 282 0 discriminator 3
 1505 000a 0132     		adds	r2, r2, #1
 1506              	.LVL188:
 1507              	.L95:
 1508              		.loc 1 282 0 is_stmt 0 discriminator 1
 1509 000c 092A     		cmp	r2, #9
 1510 000e 08DC     		bgt	.L92
 1511              		.loc 1 282 0 discriminator 2
 1512 0010 02EB8201 		add	r1, r2, r2, lsl #2
 1513 0014 8B00     		lsls	r3, r1, #2
 1514 0016 2344     		add	r3, r3, r4
 1515 0018 05EB8303 		add	r3, r5, r3, lsl #2
 1516 001c 5B68     		ldr	r3, [r3, #4]
 1517 001e 002B     		cmp	r3, #0
 1518 0020 F3D1     		bne	.L93
 1519              	.L92:
 283:Core/Src/board.c ****  
 284:Core/Src/board.c ****         if(i == BOARD_WIDTH)
 1520              		.loc 1 284 0 is_stmt 1
 1521 0022 0A2A     		cmp	r2, #10
 1522 0024 04D0     		beq	.L98
 1523              	.LVL189:
 1524              	.L94:
 1525              	.LBE13:
ARM GAS  /tmp/ccuTCLvw.s 			page 33


 278:Core/Src/board.c ****     {
 1526              		.loc 1 278 0 discriminator 2
 1527 0026 0134     		adds	r4, r4, #1
 1528              	.LVL190:
 1529              	.L91:
 278:Core/Src/board.c ****     {
 1530              		.loc 1 278 0 is_stmt 0 discriminator 1
 1531 0028 132C     		cmp	r4, #19
 1532 002a 07DC     		bgt	.L99
 1533 002c 0022     		movs	r2, #0
 1534 002e EDE7     		b	.L95
 1535              	.LVL191:
 1536              	.L98:
 1537              	.LBB14:
 285:Core/Src/board.c ****         {
 286:Core/Src/board.c ****             nbLinesDeleted++;
 1538              		.loc 1 286 0 is_stmt 1
 1539 0030 0136     		adds	r6, r6, #1
 1540              	.LVL192:
 287:Core/Src/board.c ****             deleteLine(board, j);
 1541              		.loc 1 287 0
 1542 0032 2146     		mov	r1, r4
 1543 0034 2846     		mov	r0, r5
 1544 0036 FFF7FEFF 		bl	deleteLine
 1545              	.LVL193:
 1546 003a F4E7     		b	.L94
 1547              	.L99:
 1548              	.LBE14:
 1549              	.LBE15:
 288:Core/Src/board.c ****         }
 289:Core/Src/board.c ****     }
 290:Core/Src/board.c ****  
 291:Core/Src/board.c ****     return nbLinesDeleted;
 292:Core/Src/board.c **** }
 1550              		.loc 1 292 0
 1551 003c 3046     		mov	r0, r6
 1552 003e 70BD     		pop	{r4, r5, r6, pc}
 1553              		.cfi_endproc
 1554              	.LFE753:
 1556              		.section	.text.dropCurrentPiece,"ax",%progbits
 1557              		.align	1
 1558              		.global	dropCurrentPiece
 1559              		.syntax unified
 1560              		.thumb
 1561              		.thumb_func
 1562              		.fpu fpv4-sp-d16
 1564              	dropCurrentPiece:
 1565              	.LFB754:
 293:Core/Src/board.c ****  
 294:Core/Src/board.c **** void dropCurrentPiece(Board * board)
 295:Core/Src/board.c **** {
 1566              		.loc 1 295 0
 1567              		.cfi_startproc
 1568              		@ args = 0, pretend = 0, frame = 0
 1569              		@ frame_needed = 0, uses_anonymous_args = 0
 1570              	.LVL194:
 1571 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
ARM GAS  /tmp/ccuTCLvw.s 			page 34


 1572              	.LCFI34:
 1573              		.cfi_def_cfa_offset 24
 1574              		.cfi_offset 3, -24
 1575              		.cfi_offset 4, -20
 1576              		.cfi_offset 5, -16
 1577              		.cfi_offset 6, -12
 1578              		.cfi_offset 7, -8
 1579              		.cfi_offset 14, -4
 1580 0002 0546     		mov	r5, r0
 296:Core/Src/board.c ****     int x = getPosX(board->currentPiece);
 1581              		.loc 1 296 0
 1582 0004 0068     		ldr	r0, [r0]
 1583              	.LVL195:
 1584 0006 FFF7FEFF 		bl	getPosX
 1585              	.LVL196:
 1586 000a 0446     		mov	r4, r0
 1587              	.LVL197:
 297:Core/Src/board.c ****     int y = getPosY(board->currentPiece);
 1588              		.loc 1 297 0
 1589 000c 2868     		ldr	r0, [r5]
 1590              	.LVL198:
 1591 000e FFF7FEFF 		bl	getPosY
 1592              	.LVL199:
 1593 0012 0746     		mov	r7, r0
 1594              	.LVL200:
 298:Core/Src/board.c ****  
 299:Core/Src/board.c ****     while(isCurrentPieceMovable(board, x++, y))
 1595              		.loc 1 299 0
 1596 0014 03E0     		b	.L101
 1597              	.LVL201:
 1598              	.L102:
 300:Core/Src/board.c ****         moveCurrentPieceDown(board);
 1599              		.loc 1 300 0
 1600 0016 2846     		mov	r0, r5
 1601 0018 FFF7FEFF 		bl	moveCurrentPieceDown
 1602              	.LVL202:
 299:Core/Src/board.c ****         moveCurrentPieceDown(board);
 1603              		.loc 1 299 0
 1604 001c 3446     		mov	r4, r6
 1605              	.LVL203:
 1606              	.L101:
 1607 001e 661C     		adds	r6, r4, #1
 1608              	.LVL204:
 1609 0020 3A46     		mov	r2, r7
 1610 0022 2146     		mov	r1, r4
 1611 0024 2846     		mov	r0, r5
 1612 0026 FFF7FEFF 		bl	isCurrentPieceMovable
 1613              	.LVL205:
 1614 002a 0028     		cmp	r0, #0
 1615 002c F3D1     		bne	.L102
 301:Core/Src/board.c **** }
 1616              		.loc 1 301 0
 1617 002e F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1618              		.cfi_endproc
 1619              	.LFE754:
 1621              		.section	.text.isCurrentPieceFallen,"ax",%progbits
 1622              		.align	1
ARM GAS  /tmp/ccuTCLvw.s 			page 35


 1623              		.global	isCurrentPieceFallen
 1624              		.syntax unified
 1625              		.thumb
 1626              		.thumb_func
 1627              		.fpu fpv4-sp-d16
 1629              	isCurrentPieceFallen:
 1630              	.LFB755:
 302:Core/Src/board.c ****  
 303:Core/Src/board.c **** bool isCurrentPieceFallen(Board * board)
 304:Core/Src/board.c **** {
 1631              		.loc 1 304 0
 1632              		.cfi_startproc
 1633              		@ args = 0, pretend = 0, frame = 0
 1634              		@ frame_needed = 0, uses_anonymous_args = 0
 1635              	.LVL206:
 1636 0000 38B5     		push	{r3, r4, r5, lr}
 1637              	.LCFI35:
 1638              		.cfi_def_cfa_offset 16
 1639              		.cfi_offset 3, -16
 1640              		.cfi_offset 4, -12
 1641              		.cfi_offset 5, -8
 1642              		.cfi_offset 14, -4
 1643 0002 0446     		mov	r4, r0
 305:Core/Src/board.c ****     int x = getPosX(board->currentPiece);
 1644              		.loc 1 305 0
 1645 0004 0068     		ldr	r0, [r0]
 1646              	.LVL207:
 1647 0006 FFF7FEFF 		bl	getPosX
 1648              	.LVL208:
 1649 000a 0546     		mov	r5, r0
 1650              	.LVL209:
 306:Core/Src/board.c ****     int y = getPosY(board->currentPiece);
 1651              		.loc 1 306 0
 1652 000c 2068     		ldr	r0, [r4]
 1653              	.LVL210:
 1654 000e FFF7FEFF 		bl	getPosY
 1655              	.LVL211:
 307:Core/Src/board.c ****  
 308:Core/Src/board.c ****     if(isCurrentPieceMovable(board, x + 1, y))
 1656              		.loc 1 308 0
 1657 0012 0246     		mov	r2, r0
 1658 0014 691C     		adds	r1, r5, #1
 1659 0016 2046     		mov	r0, r4
 1660              	.LVL212:
 1661 0018 FFF7FEFF 		bl	isCurrentPieceMovable
 1662              	.LVL213:
 1663 001c 08B9     		cbnz	r0, .L108
 309:Core/Src/board.c ****         return false;
 310:Core/Src/board.c ****  
 311:Core/Src/board.c ****     return true;
 1664              		.loc 1 311 0
 1665 001e 0120     		movs	r0, #1
 312:Core/Src/board.c **** }
 1666              		.loc 1 312 0
 1667 0020 38BD     		pop	{r3, r4, r5, pc}
 1668              	.LVL214:
 1669              	.L108:
ARM GAS  /tmp/ccuTCLvw.s 			page 36


 309:Core/Src/board.c ****         return false;
 1670              		.loc 1 309 0
 1671 0022 0020     		movs	r0, #0
 1672 0024 38BD     		pop	{r3, r4, r5, pc}
 1673              		.cfi_endproc
 1674              	.LFE755:
 1676              		.section	.text.moveCurrentPieceDownBot,"ax",%progbits
 1677              		.align	1
 1678              		.global	moveCurrentPieceDownBot
 1679              		.syntax unified
 1680              		.thumb
 1681              		.thumb_func
 1682              		.fpu fpv4-sp-d16
 1684              	moveCurrentPieceDownBot:
 1685              	.LFB747:
 188:Core/Src/board.c ****     if(isCurrentPieceFallen(board)){
 1686              		.loc 1 188 0
 1687              		.cfi_startproc
 1688              		@ args = 0, pretend = 0, frame = 0
 1689              		@ frame_needed = 0, uses_anonymous_args = 0
 1690              	.LVL215:
 1691 0000 10B5     		push	{r4, lr}
 1692              	.LCFI36:
 1693              		.cfi_def_cfa_offset 8
 1694              		.cfi_offset 4, -8
 1695              		.cfi_offset 14, -4
 1696 0002 0446     		mov	r4, r0
 189:Core/Src/board.c ****         return 0;
 1697              		.loc 1 189 0
 1698 0004 FFF7FEFF 		bl	isCurrentPieceFallen
 1699              	.LVL216:
 1700 0008 08B1     		cbz	r0, .L113
 190:Core/Src/board.c ****     }
 1701              		.loc 1 190 0
 1702 000a 0020     		movs	r0, #0
 195:Core/Src/board.c ****  
 1703              		.loc 1 195 0
 1704 000c 10BD     		pop	{r4, pc}
 1705              	.LVL217:
 1706              	.L113:
 193:Core/Src/board.c ****     return 1;
 1707              		.loc 1 193 0
 1708 000e 2046     		mov	r0, r4
 1709 0010 FFF7FEFF 		bl	moveCurrentPieceDown
 1710              	.LVL218:
 194:Core/Src/board.c **** }
 1711              		.loc 1 194 0
 1712 0014 0120     		movs	r0, #1
 1713 0016 10BD     		pop	{r4, pc}
 1714              		.cfi_endproc
 1715              	.LFE747:
 1717              		.section	.text.isGameOver,"ax",%progbits
 1718              		.align	1
 1719              		.global	isGameOver
 1720              		.syntax unified
 1721              		.thumb
 1722              		.thumb_func
ARM GAS  /tmp/ccuTCLvw.s 			page 37


 1723              		.fpu fpv4-sp-d16
 1725              	isGameOver:
 1726              	.LFB756:
 313:Core/Src/board.c ****  
 314:Core/Src/board.c **** int isGameOver(Board * board)
 315:Core/Src/board.c **** {
 1727              		.loc 1 315 0
 1728              		.cfi_startproc
 1729              		@ args = 0, pretend = 0, frame = 0
 1730              		@ frame_needed = 0, uses_anonymous_args = 0
 1731              		@ link register save eliminated.
 1732              	.LVL219:
 1733              	.LBB16:
 316:Core/Src/board.c ****     for(int i = 0; i < BOARD_WIDTH; ++i)
 1734              		.loc 1 316 0
 1735 0000 0023     		movs	r3, #0
 1736              	.LVL220:
 1737              	.L115:
 1738              		.loc 1 316 0 is_stmt 0 discriminator 1
 1739 0002 092B     		cmp	r3, #9
 1740 0004 07DC     		bgt	.L119
 317:Core/Src/board.c ****     {
 318:Core/Src/board.c ****         if(board->area[i][0] != FREE)
 1741              		.loc 1 318 0 is_stmt 1
 1742 0006 03EB8301 		add	r1, r3, r3, lsl #2
 1743 000a 0A01     		lsls	r2, r1, #4
 1744 000c 0244     		add	r2, r2, r0
 1745 000e 5268     		ldr	r2, [r2, #4]
 1746 0010 1AB9     		cbnz	r2, .L118
 316:Core/Src/board.c ****     for(int i = 0; i < BOARD_WIDTH; ++i)
 1747              		.loc 1 316 0 discriminator 2
 1748 0012 0133     		adds	r3, r3, #1
 1749              	.LVL221:
 1750 0014 F5E7     		b	.L115
 1751              	.L119:
 1752              	.LBE16:
 319:Core/Src/board.c ****             return 1;
 320:Core/Src/board.c ****     }
 321:Core/Src/board.c ****  
 322:Core/Src/board.c ****     return 0;
 1753              		.loc 1 322 0
 1754 0016 0020     		movs	r0, #0
 1755              	.LVL222:
 1756              	.LBB17:
 1757 0018 7047     		bx	lr
 1758              	.LVL223:
 1759              	.L118:
 319:Core/Src/board.c ****             return 1;
 1760              		.loc 1 319 0
 1761 001a 0120     		movs	r0, #1
 1762              	.LVL224:
 1763              	.LBE17:
 323:Core/Src/board.c **** }
 1764              		.loc 1 323 0
 1765 001c 7047     		bx	lr
 1766              		.cfi_endproc
 1767              	.LFE756:
ARM GAS  /tmp/ccuTCLvw.s 			page 38


 1769              		.section	.text.print,"ax",%progbits
 1770              		.align	1
 1771              		.global	print
 1772              		.syntax unified
 1773              		.thumb
 1774              		.thumb_func
 1775              		.fpu fpv4-sp-d16
 1777              	print:
 1778              	.LFB757:
 324:Core/Src/board.c **** 
 325:Core/Src/board.c **** void print(Board * board)
 326:Core/Src/board.c **** {   
 1779              		.loc 1 326 0
 1780              		.cfi_startproc
 1781              		@ args = 0, pretend = 0, frame = 0
 1782              		@ frame_needed = 0, uses_anonymous_args = 0
 1783              	.LVL225:
 1784 0000 70B5     		push	{r4, r5, r6, lr}
 1785              	.LCFI37:
 1786              		.cfi_def_cfa_offset 16
 1787              		.cfi_offset 4, -16
 1788              		.cfi_offset 5, -12
 1789              		.cfi_offset 6, -8
 1790              		.cfi_offset 14, -4
 1791 0002 82B0     		sub	sp, sp, #8
 1792              	.LCFI38:
 1793              		.cfi_def_cfa_offset 24
 1794 0004 0646     		mov	r6, r0
 1795              	.LVL226:
 1796              	.LBB18:
 327:Core/Src/board.c ****     static int previousArea[BOARD_WIDTH][BOARD_HEIGHT] = {{FREE}};
 328:Core/Src/board.c ****     uint16_t color;
 329:Core/Src/board.c ****     for(int j = 0; j < BOARD_HEIGHT; ++j)
 1797              		.loc 1 329 0
 1798 0006 0025     		movs	r5, #0
 1799 0008 5DE0     		b	.L121
 1800              	.LVL227:
 1801              	.L124:
 1802              	.LBB19:
 330:Core/Src/board.c ****     {
 331:Core/Src/board.c ****         for(int i = 0; i < BOARD_WIDTH; ++i)
 332:Core/Src/board.c ****         {
 333:Core/Src/board.c ****             if( board->area[i][j] != previousArea[i][j]){
 334:Core/Src/board.c ****                 switch(board->area[i][j]){
 335:Core/Src/board.c ****                     case FREE:
 336:Core/Src/board.c ****                         color = BLACK;
 1803              		.loc 1 336 0
 1804 000a 0022     		movs	r2, #0
 1805 000c 15E0     		b	.L126
 1806              	.L128:
 1807              	.LVL228:
 337:Core/Src/board.c ****                         break;
 338:Core/Src/board.c ****                     case CYA:
 339:Core/Src/board.c ****                         color = CYAN;
 340:Core/Src/board.c ****                         break;
 341:Core/Src/board.c ****                     case ORANG:
 342:Core/Src/board.c ****                         color = ORANGE;
ARM GAS  /tmp/ccuTCLvw.s 			page 39


 1808              		.loc 1 342 0
 1809 000e 4FF62052 		movw	r2, #64800
 343:Core/Src/board.c ****                         break;
 1810              		.loc 1 343 0
 1811 0012 12E0     		b	.L126
 1812              	.LVL229:
 1813              	.L132:
 344:Core/Src/board.c ****                     case RE:
 345:Core/Src/board.c ****                         color = RED;
 1814              		.loc 1 345 0
 1815 0014 4FF47842 		mov	r2, #63488
 346:Core/Src/board.c ****                         break;
 1816              		.loc 1 346 0
 1817 0018 0FE0     		b	.L126
 1818              	.LVL230:
 1819              	.L131:
 347:Core/Src/board.c ****                     case PURPL:
 348:Core/Src/board.c ****                         color = PURPLE;
 1820              		.loc 1 348 0
 1821 001a 47F60F02 		movw	r2, #30735
 349:Core/Src/board.c ****                         break;
 1822              		.loc 1 349 0
 1823 001e 0CE0     		b	.L126
 1824              	.LVL231:
 1825              	.L130:
 350:Core/Src/board.c ****                     case GREE:
 351:Core/Src/board.c ****                         color = GREEN;
 1826              		.loc 1 351 0
 1827 0020 4FF4FC62 		mov	r2, #2016
 352:Core/Src/board.c ****                         break;
 1828              		.loc 1 352 0
 1829 0024 09E0     		b	.L126
 1830              	.LVL232:
 1831              	.L129:
 353:Core/Src/board.c ****                     case YELLO:
 354:Core/Src/board.c ****                         color = YELLOW;
 1832              		.loc 1 354 0
 1833 0026 4FF6E072 		movw	r2, #65504
 355:Core/Src/board.c ****                         break;
 1834              		.loc 1 355 0
 1835 002a 06E0     		b	.L126
 1836              	.LVL233:
 1837              	.L127:
 356:Core/Src/board.c ****                     case BLU:
 357:Core/Src/board.c ****                         color = BLUE;
 1838              		.loc 1 357 0
 1839 002c 1F22     		movs	r2, #31
 358:Core/Src/board.c ****                         break;
 1840              		.loc 1 358 0
 1841 002e 04E0     		b	.L126
 1842              	.LVL234:
 1843              	.L123:
 359:Core/Src/board.c ****                     default:
 360:Core/Src/board.c ****                         color = WHITE;
 1844              		.loc 1 360 0
 1845 0030 4FF6FF72 		movw	r2, #65535
 361:Core/Src/board.c ****                         break;
ARM GAS  /tmp/ccuTCLvw.s 			page 40


 1846              		.loc 1 361 0
 1847 0034 01E0     		b	.L126
 1848              	.LVL235:
 1849              	.L135:
 339:Core/Src/board.c ****                         break;
 1850              		.loc 1 339 0
 1851 0036 40F2FF72 		movw	r2, #2047
 1852              	.L126:
 1853              	.LVL236:
 362:Core/Src/board.c ****                 }
 363:Core/Src/board.c ****                 fillRect(TFTWIDTH -1 -DECALAGE_HAUT -(j*TAILLE_CASE), i*TAILLE_CASE + DECALAGE_GAUC
 1854              		.loc 1 363 0
 1855 003a 264B     		ldr	r3, .L140
 1856 003c 1888     		ldrh	r0, [r3]
 1857 003e C5EB0533 		rsb	r3, r5, r5, lsl #12
 1858 0042 05EB8303 		add	r3, r5, r3, lsl #2
 1859 0046 05EB8303 		add	r3, r5, r3, lsl #2
 1860 004a 13FA80F0 		uxtah	r0, r3, r0
 1861 004e 1538     		subs	r0, r0, #21
 1862 0050 04EB8401 		add	r1, r4, r4, lsl #2
 1863 0054 04EB4101 		add	r1, r4, r1, lsl #1
 1864 0058 1431     		adds	r1, r1, #20
 1865 005a 0092     		str	r2, [sp]
 1866 005c 0B23     		movs	r3, #11
 1867 005e 1A46     		mov	r2, r3
 1868              	.LVL237:
 1869 0060 09B2     		sxth	r1, r1
 1870 0062 00B2     		sxth	r0, r0
 1871 0064 FFF7FEFF 		bl	fillRect
 1872              	.LVL238:
 1873              	.L122:
 364:Core/Src/board.c ****             }
 365:Core/Src/board.c ****             previousArea[i][j] = board->area[i][j];
 1874              		.loc 1 365 0 discriminator 2
 1875 0068 A200     		lsls	r2, r4, #2
 1876 006a 2244     		add	r2, r2, r4
 1877 006c 9300     		lsls	r3, r2, #2
 1878 006e 2B44     		add	r3, r3, r5
 1879 0070 06EB8302 		add	r2, r6, r3, lsl #2
 1880 0074 5168     		ldr	r1, [r2, #4]
 1881 0076 184A     		ldr	r2, .L140+4
 1882 0078 42F82310 		str	r1, [r2, r3, lsl #2]
 331:Core/Src/board.c ****         {
 1883              		.loc 1 331 0 discriminator 2
 1884 007c 0134     		adds	r4, r4, #1
 1885              	.LVL239:
 1886              	.L134:
 331:Core/Src/board.c ****         {
 1887              		.loc 1 331 0 is_stmt 0 discriminator 1
 1888 007e 092C     		cmp	r4, #9
 1889 0080 20DC     		bgt	.L138
 333:Core/Src/board.c ****                 switch(board->area[i][j]){
 1890              		.loc 1 333 0 is_stmt 1
 1891 0082 A200     		lsls	r2, r4, #2
 1892 0084 2244     		add	r2, r2, r4
 1893 0086 9300     		lsls	r3, r2, #2
 1894 0088 2B44     		add	r3, r3, r5
ARM GAS  /tmp/ccuTCLvw.s 			page 41


 1895 008a 06EB8302 		add	r2, r6, r3, lsl #2
 1896 008e 5268     		ldr	r2, [r2, #4]
 1897 0090 1149     		ldr	r1, .L140+4
 1898 0092 51F82330 		ldr	r3, [r1, r3, lsl #2]
 1899 0096 9A42     		cmp	r2, r3
 1900 0098 E6D0     		beq	.L122
 334:Core/Src/board.c ****                     case FREE:
 1901              		.loc 1 334 0
 1902 009a 072A     		cmp	r2, #7
 1903 009c C8D8     		bhi	.L123
 1904 009e 01A3     		adr	r3, .L125
 1905 00a0 53F822F0 		ldr	pc, [r3, r2, lsl #2]
 1906              		.p2align 2
 1907              	.L125:
 1908 00a4 0B000000 		.word	.L124+1
 1909 00a8 37000000 		.word	.L135+1
 1910 00ac 2D000000 		.word	.L127+1
 1911 00b0 0F000000 		.word	.L128+1
 1912 00b4 27000000 		.word	.L129+1
 1913 00b8 21000000 		.word	.L130+1
 1914 00bc 1B000000 		.word	.L131+1
 1915 00c0 15000000 		.word	.L132+1
 1916              		.p2align 1
 1917              	.L138:
 1918              	.LBE19:
 329:Core/Src/board.c ****     {
 1919              		.loc 1 329 0 discriminator 2
 1920 00c4 0135     		adds	r5, r5, #1
 1921              	.LVL240:
 1922              	.L121:
 329:Core/Src/board.c ****     {
 1923              		.loc 1 329 0 is_stmt 0 discriminator 1
 1924 00c6 132D     		cmp	r5, #19
 1925 00c8 01DC     		bgt	.L139
 1926 00ca 0024     		movs	r4, #0
 1927 00cc D7E7     		b	.L134
 1928              	.L139:
 1929              	.LBE18:
 366:Core/Src/board.c ****         } 
 367:Core/Src/board.c ****     }
 368:Core/Src/board.c ****     
 369:Core/Src/board.c **** }
 1930              		.loc 1 369 0 is_stmt 1
 1931 00ce 02B0     		add	sp, sp, #8
 1932              	.LCFI39:
 1933              		.cfi_def_cfa_offset 16
 1934              		@ sp needed
 1935 00d0 70BD     		pop	{r4, r5, r6, pc}
 1936              	.LVL241:
 1937              	.L141:
 1938 00d2 00BF     		.align	2
 1939              	.L140:
 1940 00d4 00000000 		.word	TFTWIDTH
 1941 00d8 00000000 		.word	.LANCHOR1
 1942              		.cfi_endproc
 1943              	.LFE757:
 1945              		.section	.text.printBorders,"ax",%progbits
ARM GAS  /tmp/ccuTCLvw.s 			page 42


 1946              		.align	1
 1947              		.global	printBorders
 1948              		.syntax unified
 1949              		.thumb
 1950              		.thumb_func
 1951              		.fpu fpv4-sp-d16
 1953              	printBorders:
 1954              	.LFB758:
 370:Core/Src/board.c **** 
 371:Core/Src/board.c **** void printBorders(){
 1955              		.loc 1 371 0
 1956              		.cfi_startproc
 1957              		@ args = 0, pretend = 0, frame = 0
 1958              		@ frame_needed = 0, uses_anonymous_args = 0
 1959 0000 70B5     		push	{r4, r5, r6, lr}
 1960              	.LCFI40:
 1961              		.cfi_def_cfa_offset 16
 1962              		.cfi_offset 4, -16
 1963              		.cfi_offset 5, -12
 1964              		.cfi_offset 6, -8
 1965              		.cfi_offset 14, -4
 1966 0002 82B0     		sub	sp, sp, #8
 1967              	.LCFI41:
 1968              		.cfi_def_cfa_offset 24
 372:Core/Src/board.c ****     fillRect(TFTWIDTH-DECALAGE_HAUT-((BOARD_HEIGHT-1)*TAILLE_CASE)-3,DECALAGE_GAUCHE-2,TAILLE_CASE*
 1969              		.loc 1 372 0
 1970 0004 164D     		ldr	r5, .L144
 1971 0006 2888     		ldrh	r0, [r5]
 1972 0008 80B2     		uxth	r0, r0
 1973 000a E838     		subs	r0, r0, #232
 1974 000c 4FF6FF76 		movw	r6, #65535
 1975 0010 0096     		str	r6, [sp]
 1976 0012 7223     		movs	r3, #114
 1977 0014 E022     		movs	r2, #224
 1978 0016 1221     		movs	r1, #18
 1979 0018 00B2     		sxth	r0, r0
 1980 001a FFF7FEFF 		bl	fillRect
 1981              	.LVL242:
 373:Core/Src/board.c ****     fillRect(TFTWIDTH-DECALAGE_HAUT-((BOARD_HEIGHT-1)*TAILLE_CASE)-1,DECALAGE_GAUCHE,TAILLE_CASE*BO
 1982              		.loc 1 373 0
 1983 001e 2888     		ldrh	r0, [r5]
 1984 0020 80B2     		uxth	r0, r0
 1985 0022 E638     		subs	r0, r0, #230
 1986 0024 0024     		movs	r4, #0
 1987 0026 0094     		str	r4, [sp]
 1988 0028 6E23     		movs	r3, #110
 1989 002a DC22     		movs	r2, #220
 1990 002c 1421     		movs	r1, #20
 1991 002e 00B2     		sxth	r0, r0
 1992 0030 FFF7FEFF 		bl	fillRect
 1993              	.LVL243:
 374:Core/Src/board.c **** 
 375:Core/Src/board.c ****     fillRect(TFTWIDTH - 80, BOARD_WIDTH*TAILLE_CASE  + DECALAGE_GAUCHE + 15, 72, 72,WHITE);
 1994              		.loc 1 375 0
 1995 0034 2888     		ldrh	r0, [r5]
 1996 0036 80B2     		uxth	r0, r0
 1997 0038 5038     		subs	r0, r0, #80
ARM GAS  /tmp/ccuTCLvw.s 			page 43


 1998 003a 0096     		str	r6, [sp]
 1999 003c 4823     		movs	r3, #72
 2000 003e 1A46     		mov	r2, r3
 2001 0040 9121     		movs	r1, #145
 2002 0042 00B2     		sxth	r0, r0
 2003 0044 FFF7FEFF 		bl	fillRect
 2004              	.LVL244:
 376:Core/Src/board.c ****     fillRect(TFTWIDTH - 78, BOARD_WIDTH*TAILLE_CASE + DECALAGE_GAUCHE + 17 , 68, 68,BLACK);
 2005              		.loc 1 376 0
 2006 0048 2888     		ldrh	r0, [r5]
 2007 004a 80B2     		uxth	r0, r0
 2008 004c 4E38     		subs	r0, r0, #78
 2009 004e 0094     		str	r4, [sp]
 2010 0050 4423     		movs	r3, #68
 2011 0052 1A46     		mov	r2, r3
 2012 0054 9321     		movs	r1, #147
 2013 0056 00B2     		sxth	r0, r0
 2014 0058 FFF7FEFF 		bl	fillRect
 2015              	.LVL245:
 377:Core/Src/board.c **** }
 2016              		.loc 1 377 0
 2017 005c 02B0     		add	sp, sp, #8
 2018              	.LCFI42:
 2019              		.cfi_def_cfa_offset 16
 2020              		@ sp needed
 2021 005e 70BD     		pop	{r4, r5, r6, pc}
 2022              	.L145:
 2023              		.align	2
 2024              	.L144:
 2025 0060 00000000 		.word	TFTWIDTH
 2026              		.cfi_endproc
 2027              	.LFE758:
 2029              		.section	.text.printNextPiece,"ax",%progbits
 2030              		.align	1
 2031              		.global	printNextPiece
 2032              		.syntax unified
 2033              		.thumb
 2034              		.thumb_func
 2035              		.fpu fpv4-sp-d16
 2037              	printNextPiece:
 2038              	.LFB759:
 378:Core/Src/board.c **** 
 379:Core/Src/board.c **** void printNextPiece(int id){
 2039              		.loc 1 379 0
 2040              		.cfi_startproc
 2041              		@ args = 0, pretend = 0, frame = 0
 2042              		@ frame_needed = 0, uses_anonymous_args = 0
 2043              	.LVL246:
 2044 0000 30B5     		push	{r4, r5, lr}
 2045              	.LCFI43:
 2046              		.cfi_def_cfa_offset 12
 2047              		.cfi_offset 4, -12
 2048              		.cfi_offset 5, -8
 2049              		.cfi_offset 14, -4
 2050 0002 83B0     		sub	sp, sp, #12
 2051              	.LCFI44:
 2052              		.cfi_def_cfa_offset 24
ARM GAS  /tmp/ccuTCLvw.s 			page 44


 2053 0004 0446     		mov	r4, r0
 380:Core/Src/board.c ****     fillRect(TFTWIDTH - 78, BOARD_WIDTH*TAILLE_CASE + DECALAGE_GAUCHE + 17 , 68, 68,BLACK);
 2054              		.loc 1 380 0
 2055 0006 544B     		ldr	r3, .L157
 2056 0008 1888     		ldrh	r0, [r3]
 2057              	.LVL247:
 2058 000a 80B2     		uxth	r0, r0
 2059 000c 4E38     		subs	r0, r0, #78
 2060 000e 0023     		movs	r3, #0
 2061 0010 0093     		str	r3, [sp]
 2062 0012 4423     		movs	r3, #68
 2063 0014 1A46     		mov	r2, r3
 2064 0016 9321     		movs	r1, #147
 2065 0018 00B2     		sxth	r0, r0
 2066 001a FFF7FEFF 		bl	fillRect
 2067              	.LVL248:
 381:Core/Src/board.c ****     switch(id){
 2068              		.loc 1 381 0
 2069 001e 062C     		cmp	r4, #6
 2070 0020 12D8     		bhi	.L146
 2071 0022 DFE804F0 		tbb	[pc, r4]
 2072              	.L149:
 2073 0026 73       		.byte	(.L148-.L149)/2
 2074 0027 04       		.byte	(.L150-.L149)/2
 2075 0028 5B       		.byte	(.L151-.L149)/2
 2076 0029 2B       		.byte	(.L152-.L149)/2
 2077 002a 13       		.byte	(.L153-.L149)/2
 2078 002b 81       		.byte	(.L154-.L149)/2
 2079 002c 43       		.byte	(.L155-.L149)/2
 2080 002d 00       		.p2align 1
 2081              	.L150:
 382:Core/Src/board.c ****         case I:
 383:Core/Src/board.c ****             fillRect(TFTWIDTH - 80 + 30, BOARD_WIDTH*TAILLE_CASE + DECALAGE_GAUCHE + 15 + 12, 12, 4
 2082              		.loc 1 383 0
 2083 002e 4A4B     		ldr	r3, .L157
 2084 0030 1888     		ldrh	r0, [r3]
 2085 0032 80B2     		uxth	r0, r0
 2086 0034 3238     		subs	r0, r0, #50
 2087 0036 40F2FF73 		movw	r3, #2047
 2088 003a 0093     		str	r3, [sp]
 2089 003c 3023     		movs	r3, #48
 2090 003e 0C22     		movs	r2, #12
 2091 0040 9D21     		movs	r1, #157
 2092 0042 00B2     		sxth	r0, r0
 2093 0044 FFF7FEFF 		bl	fillRect
 2094              	.LVL249:
 2095              	.L146:
 384:Core/Src/board.c ****             break;
 385:Core/Src/board.c ****         case L:
 386:Core/Src/board.c ****             fillRect(TFTWIDTH - 80 + 36, BOARD_WIDTH*TAILLE_CASE + DECALAGE_GAUCHE + 15 + 18, 12, 3
 387:Core/Src/board.c ****             fillRect(TFTWIDTH - 80 + 24, BOARD_WIDTH*TAILLE_CASE + DECALAGE_GAUCHE + 15 + 18, 12, 1
 388:Core/Src/board.c ****             break;
 389:Core/Src/board.c ****         case Z:
 390:Core/Src/board.c ****             fillRect(TFTWIDTH - 80 + 36, BOARD_WIDTH*TAILLE_CASE + DECALAGE_GAUCHE + 15 + 18, 12, 2
 391:Core/Src/board.c ****             fillRect(TFTWIDTH - 80 + 24, BOARD_WIDTH*TAILLE_CASE  + DECALAGE_GAUCHE + 15 + 30, 12, 
 392:Core/Src/board.c ****             break;
 393:Core/Src/board.c ****         case T:
ARM GAS  /tmp/ccuTCLvw.s 			page 45


 394:Core/Src/board.c ****             fillRect(TFTWIDTH - 80 + 36, BOARD_WIDTH*TAILLE_CASE + DECALAGE_GAUCHE + 15 + 18, 12, 3
 395:Core/Src/board.c ****             fillRect(TFTWIDTH - 80 + 24, BOARD_WIDTH*TAILLE_CASE  + DECALAGE_GAUCHE + 15 + 30, 12, 
 396:Core/Src/board.c ****             break;
 397:Core/Src/board.c ****         case S:
 398:Core/Src/board.c ****             fillRect(TFTWIDTH - 80 + 24, BOARD_WIDTH*TAILLE_CASE + DECALAGE_GAUCHE + 15 + 18, 12, 2
 399:Core/Src/board.c ****             fillRect(TFTWIDTH - 80 + 36, BOARD_WIDTH*TAILLE_CASE  + DECALAGE_GAUCHE + 15 + 30, 12, 
 400:Core/Src/board.c ****             break;
 401:Core/Src/board.c ****         case O:
 402:Core/Src/board.c ****             fillRect(TFTWIDTH - 80 + 24, BOARD_WIDTH*TAILLE_CASE + DECALAGE_GAUCHE + 15 + 24, 24, 2
 403:Core/Src/board.c ****             break;
 404:Core/Src/board.c ****         case J:
 405:Core/Src/board.c ****             fillRect(TFTWIDTH - 80 +  36, BOARD_WIDTH*TAILLE_CASE + DECALAGE_GAUCHE + 15 + 18, 12, 
 406:Core/Src/board.c ****             fillRect(TFTWIDTH - 80 +  24, BOARD_WIDTH*TAILLE_CASE + DECALAGE_GAUCHE + 15 + 42, 12, 
 407:Core/Src/board.c ****             break;
 408:Core/Src/board.c ****         default:
 409:Core/Src/board.c ****             break;
 410:Core/Src/board.c ****     }
 411:Core/Src/board.c **** }
 2096              		.loc 1 411 0
 2097 0048 03B0     		add	sp, sp, #12
 2098              	.LCFI45:
 2099              		.cfi_remember_state
 2100              		.cfi_def_cfa_offset 12
 2101              		@ sp needed
 2102 004a 30BD     		pop	{r4, r5, pc}
 2103              	.LVL250:
 2104              	.L153:
 2105              	.LCFI46:
 2106              		.cfi_restore_state
 386:Core/Src/board.c ****             fillRect(TFTWIDTH - 80 + 24, BOARD_WIDTH*TAILLE_CASE + DECALAGE_GAUCHE + 15 + 18, 12, 1
 2107              		.loc 1 386 0
 2108 004c 424D     		ldr	r5, .L157
 2109 004e 2888     		ldrh	r0, [r5]
 2110 0050 80B2     		uxth	r0, r0
 2111 0052 2C38     		subs	r0, r0, #44
 2112 0054 4FF62054 		movw	r4, #64800
 2113              	.LVL251:
 2114 0058 0094     		str	r4, [sp]
 2115 005a 2423     		movs	r3, #36
 2116 005c 0C22     		movs	r2, #12
 2117 005e A321     		movs	r1, #163
 2118 0060 00B2     		sxth	r0, r0
 2119 0062 FFF7FEFF 		bl	fillRect
 2120              	.LVL252:
 387:Core/Src/board.c ****             break;
 2121              		.loc 1 387 0
 2122 0066 2888     		ldrh	r0, [r5]
 2123 0068 80B2     		uxth	r0, r0
 2124 006a 3838     		subs	r0, r0, #56
 2125 006c 0094     		str	r4, [sp]
 2126 006e 0C23     		movs	r3, #12
 2127 0070 1A46     		mov	r2, r3
 2128 0072 A321     		movs	r1, #163
 2129 0074 00B2     		sxth	r0, r0
 2130 0076 FFF7FEFF 		bl	fillRect
 2131              	.LVL253:
 388:Core/Src/board.c ****         case Z:
ARM GAS  /tmp/ccuTCLvw.s 			page 46


 2132              		.loc 1 388 0
 2133 007a E5E7     		b	.L146
 2134              	.LVL254:
 2135              	.L152:
 390:Core/Src/board.c ****             fillRect(TFTWIDTH - 80 + 24, BOARD_WIDTH*TAILLE_CASE  + DECALAGE_GAUCHE + 15 + 30, 12, 
 2136              		.loc 1 390 0
 2137 007c 364D     		ldr	r5, .L157
 2138 007e 2888     		ldrh	r0, [r5]
 2139 0080 80B2     		uxth	r0, r0
 2140 0082 2C38     		subs	r0, r0, #44
 2141 0084 4FF47844 		mov	r4, #63488
 2142              	.LVL255:
 2143 0088 0094     		str	r4, [sp]
 2144 008a 1823     		movs	r3, #24
 2145 008c 0C22     		movs	r2, #12
 2146 008e A321     		movs	r1, #163
 2147 0090 00B2     		sxth	r0, r0
 2148 0092 FFF7FEFF 		bl	fillRect
 2149              	.LVL256:
 391:Core/Src/board.c ****             break;
 2150              		.loc 1 391 0
 2151 0096 2888     		ldrh	r0, [r5]
 2152 0098 80B2     		uxth	r0, r0
 2153 009a 3838     		subs	r0, r0, #56
 2154 009c 0094     		str	r4, [sp]
 2155 009e 1823     		movs	r3, #24
 2156 00a0 0C22     		movs	r2, #12
 2157 00a2 AF21     		movs	r1, #175
 2158 00a4 00B2     		sxth	r0, r0
 2159 00a6 FFF7FEFF 		bl	fillRect
 2160              	.LVL257:
 392:Core/Src/board.c ****         case T:
 2161              		.loc 1 392 0
 2162 00aa CDE7     		b	.L146
 2163              	.LVL258:
 2164              	.L155:
 394:Core/Src/board.c ****             fillRect(TFTWIDTH - 80 + 24, BOARD_WIDTH*TAILLE_CASE  + DECALAGE_GAUCHE + 15 + 30, 12, 
 2165              		.loc 1 394 0
 2166 00ac 2A4D     		ldr	r5, .L157
 2167 00ae 2888     		ldrh	r0, [r5]
 2168 00b0 80B2     		uxth	r0, r0
 2169 00b2 2C38     		subs	r0, r0, #44
 2170 00b4 47F60F04 		movw	r4, #30735
 2171              	.LVL259:
 2172 00b8 0094     		str	r4, [sp]
 2173 00ba 2423     		movs	r3, #36
 2174 00bc 0C22     		movs	r2, #12
 2175 00be A321     		movs	r1, #163
 2176 00c0 00B2     		sxth	r0, r0
 2177 00c2 FFF7FEFF 		bl	fillRect
 2178              	.LVL260:
 395:Core/Src/board.c ****             break;
 2179              		.loc 1 395 0
 2180 00c6 2888     		ldrh	r0, [r5]
 2181 00c8 80B2     		uxth	r0, r0
 2182 00ca 3838     		subs	r0, r0, #56
 2183 00cc 0094     		str	r4, [sp]
ARM GAS  /tmp/ccuTCLvw.s 			page 47


 2184 00ce 0C23     		movs	r3, #12
 2185 00d0 1A46     		mov	r2, r3
 2186 00d2 AF21     		movs	r1, #175
 2187 00d4 00B2     		sxth	r0, r0
 2188 00d6 FFF7FEFF 		bl	fillRect
 2189              	.LVL261:
 396:Core/Src/board.c ****         case S:
 2190              		.loc 1 396 0
 2191 00da B5E7     		b	.L146
 2192              	.LVL262:
 2193              	.L151:
 398:Core/Src/board.c ****             fillRect(TFTWIDTH - 80 + 36, BOARD_WIDTH*TAILLE_CASE  + DECALAGE_GAUCHE + 15 + 30, 12, 
 2194              		.loc 1 398 0
 2195 00dc 1E4D     		ldr	r5, .L157
 2196 00de 2888     		ldrh	r0, [r5]
 2197 00e0 80B2     		uxth	r0, r0
 2198 00e2 3838     		subs	r0, r0, #56
 2199 00e4 4FF4FC64 		mov	r4, #2016
 2200              	.LVL263:
 2201 00e8 0094     		str	r4, [sp]
 2202 00ea 1823     		movs	r3, #24
 2203 00ec 0C22     		movs	r2, #12
 2204 00ee A321     		movs	r1, #163
 2205 00f0 00B2     		sxth	r0, r0
 2206 00f2 FFF7FEFF 		bl	fillRect
 2207              	.LVL264:
 399:Core/Src/board.c ****             break;
 2208              		.loc 1 399 0
 2209 00f6 2888     		ldrh	r0, [r5]
 2210 00f8 80B2     		uxth	r0, r0
 2211 00fa 2C38     		subs	r0, r0, #44
 2212 00fc 0094     		str	r4, [sp]
 2213 00fe 1823     		movs	r3, #24
 2214 0100 0C22     		movs	r2, #12
 2215 0102 AF21     		movs	r1, #175
 2216 0104 00B2     		sxth	r0, r0
 2217 0106 FFF7FEFF 		bl	fillRect
 2218              	.LVL265:
 400:Core/Src/board.c ****         case O:
 2219              		.loc 1 400 0
 2220 010a 9DE7     		b	.L146
 2221              	.LVL266:
 2222              	.L148:
 402:Core/Src/board.c ****             break;
 2223              		.loc 1 402 0
 2224 010c 124B     		ldr	r3, .L157
 2225 010e 1888     		ldrh	r0, [r3]
 2226 0110 80B2     		uxth	r0, r0
 2227 0112 3838     		subs	r0, r0, #56
 2228 0114 4FF6E073 		movw	r3, #65504
 2229 0118 0093     		str	r3, [sp]
 2230 011a 1823     		movs	r3, #24
 2231 011c 1A46     		mov	r2, r3
 2232 011e A921     		movs	r1, #169
 2233 0120 00B2     		sxth	r0, r0
 2234 0122 FFF7FEFF 		bl	fillRect
 2235              	.LVL267:
ARM GAS  /tmp/ccuTCLvw.s 			page 48


 403:Core/Src/board.c ****         case J:
 2236              		.loc 1 403 0
 2237 0126 8FE7     		b	.L146
 2238              	.L154:
 405:Core/Src/board.c ****             fillRect(TFTWIDTH - 80 +  24, BOARD_WIDTH*TAILLE_CASE + DECALAGE_GAUCHE + 15 + 42, 12, 
 2239              		.loc 1 405 0
 2240 0128 0B4D     		ldr	r5, .L157
 2241 012a 2888     		ldrh	r0, [r5]
 2242 012c 80B2     		uxth	r0, r0
 2243 012e 2C38     		subs	r0, r0, #44
 2244 0130 1F24     		movs	r4, #31
 2245              	.LVL268:
 2246 0132 0094     		str	r4, [sp]
 2247 0134 2423     		movs	r3, #36
 2248 0136 0C22     		movs	r2, #12
 2249 0138 A321     		movs	r1, #163
 2250 013a 00B2     		sxth	r0, r0
 2251 013c FFF7FEFF 		bl	fillRect
 2252              	.LVL269:
 406:Core/Src/board.c ****             break;
 2253              		.loc 1 406 0
 2254 0140 2888     		ldrh	r0, [r5]
 2255 0142 80B2     		uxth	r0, r0
 2256 0144 3838     		subs	r0, r0, #56
 2257 0146 0094     		str	r4, [sp]
 2258 0148 0C23     		movs	r3, #12
 2259 014a 1A46     		mov	r2, r3
 2260 014c BB21     		movs	r1, #187
 2261 014e 00B2     		sxth	r0, r0
 2262 0150 FFF7FEFF 		bl	fillRect
 2263              	.LVL270:
 2264              		.loc 1 411 0
 2265 0154 78E7     		b	.L146
 2266              	.L158:
 2267 0156 00BF     		.align	2
 2268              	.L157:
 2269 0158 00000000 		.word	TFTWIDTH
 2270              		.cfi_endproc
 2271              	.LFE759:
 2273              		.section	.text.clear,"ax",%progbits
 2274              		.align	1
 2275              		.global	clear
 2276              		.syntax unified
 2277              		.thumb
 2278              		.thumb_func
 2279              		.fpu fpv4-sp-d16
 2281              	clear:
 2282              	.LFB760:
 412:Core/Src/board.c **** 
 413:Core/Src/board.c **** 
 414:Core/Src/board.c **** void clear(Board * board)
 415:Core/Src/board.c **** {
 2283              		.loc 1 415 0
 2284              		.cfi_startproc
 2285              		@ args = 0, pretend = 0, frame = 0
 2286              		@ frame_needed = 0, uses_anonymous_args = 0
 2287              		@ link register save eliminated.
ARM GAS  /tmp/ccuTCLvw.s 			page 49


 2288              	.LVL271:
 2289 0000 10B4     		push	{r4}
 2290              	.LCFI47:
 2291              		.cfi_def_cfa_offset 4
 2292              		.cfi_offset 4, -4
 2293              	.LVL272:
 2294              	.LBB20:
 416:Core/Src/board.c ****     for(int i = 0; i < BOARD_WIDTH; ++i)
 2295              		.loc 1 416 0
 2296 0002 0024     		movs	r4, #0
 2297 0004 0BE0     		b	.L160
 2298              	.LVL273:
 2299              	.L161:
 2300              	.LBB21:
 417:Core/Src/board.c ****     {
 418:Core/Src/board.c ****         for(int j = 0; j < BOARD_HEIGHT; ++j)
 419:Core/Src/board.c ****             board->area[i][j] = FREE;
 2301              		.loc 1 419 0 discriminator 3
 2302 0006 04EB8401 		add	r1, r4, r4, lsl #2
 2303 000a 8B00     		lsls	r3, r1, #2
 2304 000c 1344     		add	r3, r3, r2
 2305 000e 00EB8303 		add	r3, r0, r3, lsl #2
 2306 0012 0021     		movs	r1, #0
 2307 0014 5960     		str	r1, [r3, #4]
 418:Core/Src/board.c ****             board->area[i][j] = FREE;
 2308              		.loc 1 418 0 discriminator 3
 2309 0016 0132     		adds	r2, r2, #1
 2310              	.LVL274:
 2311              	.L162:
 418:Core/Src/board.c ****             board->area[i][j] = FREE;
 2312              		.loc 1 418 0 is_stmt 0 discriminator 1
 2313 0018 132A     		cmp	r2, #19
 2314 001a F4DD     		ble	.L161
 2315              	.LBE21:
 416:Core/Src/board.c ****     for(int i = 0; i < BOARD_WIDTH; ++i)
 2316              		.loc 1 416 0 is_stmt 1 discriminator 2
 2317 001c 0134     		adds	r4, r4, #1
 2318              	.LVL275:
 2319              	.L160:
 416:Core/Src/board.c ****     for(int i = 0; i < BOARD_WIDTH; ++i)
 2320              		.loc 1 416 0 is_stmt 0 discriminator 1
 2321 001e 092C     		cmp	r4, #9
 2322 0020 01DC     		bgt	.L165
 2323 0022 0022     		movs	r2, #0
 2324 0024 F8E7     		b	.L162
 2325              	.L165:
 2326              	.LBE20:
 420:Core/Src/board.c ****     }
 421:Core/Src/board.c **** }...
 2327              		.loc 1 421 0 is_stmt 1
 2328 0026 5DF8044B 		ldr	r4, [sp], #4
 2329              	.LCFI48:
 2330              		.cfi_restore 4
 2331              		.cfi_def_cfa_offset 0
 2332              	.LVL276:
 2333 002a 7047     		bx	lr
 2334              		.cfi_endproc
ARM GAS  /tmp/ccuTCLvw.s 			page 50


 2335              	.LFE760:
 2337              		.section	.bss.previousArea.12282,"aw",%nobits
 2338              		.align	2
 2339              		.set	.LANCHOR1,. + 0
 2342              	previousArea.12282:
 2343 0000 00000000 		.space	800
 2343      00000000 
 2343      00000000 
 2343      00000000 
 2343      00000000 
 2344              		.section	.rodata.PIECES,"a",%progbits
 2345              		.align	2
 2346              		.set	.LANCHOR0,. + 0
 2349              	PIECES:
 2350 0000 00000000 		.word	0
 2351 0004 00000000 		.word	0
 2352 0008 00000000 		.word	0
 2353 000c 00000000 		.word	0
 2354 0010 00000000 		.word	0
 2355 0014 01000000 		.word	1
 2356 0018 02000000 		.word	2
 2357 001c 00000000 		.word	0
 2358 0020 00000000 		.word	0
 2359 0024 01000000 		.word	1
 2360 0028 01000000 		.word	1
 2361 002c 00000000 		.word	0
 2362 0030 00000000 		.word	0
 2363 0034 00000000 		.word	0
 2364 0038 00000000 		.word	0
 2365 003c 00000000 		.word	0
 2366 0040 00000000 		.word	0
 2367 0044 00000000 		.word	0
 2368 0048 00000000 		.word	0
 2369 004c 00000000 		.word	0
 2370 0050 00000000 		.word	0
 2371 0054 01000000 		.word	1
 2372 0058 02000000 		.word	2
 2373 005c 00000000 		.word	0
 2374 0060 00000000 		.word	0
 2375 0064 01000000 		.word	1
 2376 0068 01000000 		.word	1
 2377 006c 00000000 		.word	0
 2378 0070 00000000 		.word	0
 2379 0074 00000000 		.word	0
 2380 0078 00000000 		.word	0
 2381 007c 00000000 		.word	0
 2382 0080 00000000 		.word	0
 2383 0084 00000000 		.word	0
 2384 0088 00000000 		.word	0
 2385 008c 00000000 		.word	0
 2386 0090 00000000 		.word	0
 2387 0094 01000000 		.word	1
 2388 0098 02000000 		.word	2
 2389 009c 00000000 		.word	0
 2390 00a0 00000000 		.word	0
 2391 00a4 01000000 		.word	1
 2392 00a8 01000000 		.word	1
ARM GAS  /tmp/ccuTCLvw.s 			page 51


 2393 00ac 00000000 		.word	0
 2394 00b0 00000000 		.word	0
 2395 00b4 00000000 		.word	0
 2396 00b8 00000000 		.word	0
 2397 00bc 00000000 		.word	0
 2398 00c0 00000000 		.word	0
 2399 00c4 00000000 		.word	0
 2400 00c8 00000000 		.word	0
 2401 00cc 00000000 		.word	0
 2402 00d0 00000000 		.word	0
 2403 00d4 01000000 		.word	1
 2404 00d8 02000000 		.word	2
 2405 00dc 00000000 		.word	0
 2406 00e0 00000000 		.word	0
 2407 00e4 01000000 		.word	1
 2408 00e8 01000000 		.word	1
 2409 00ec 00000000 		.word	0
 2410 00f0 00000000 		.word	0
 2411 00f4 00000000 		.word	0
 2412 00f8 00000000 		.word	0
 2413 00fc 00000000 		.word	0
 2414 0100 00000000 		.word	0
 2415 0104 00000000 		.word	0
 2416 0108 00000000 		.word	0
 2417 010c 00000000 		.word	0
 2418 0110 01000000 		.word	1
 2419 0114 01000000 		.word	1
 2420 0118 02000000 		.word	2
 2421 011c 01000000 		.word	1
 2422 0120 00000000 		.word	0
 2423 0124 00000000 		.word	0
 2424 0128 00000000 		.word	0
 2425 012c 00000000 		.word	0
 2426 0130 00000000 		.word	0
 2427 0134 00000000 		.word	0
 2428 0138 00000000 		.word	0
 2429 013c 00000000 		.word	0
 2430 0140 00000000 		.word	0
 2431 0144 00000000 		.word	0
 2432 0148 01000000 		.word	1
 2433 014c 00000000 		.word	0
 2434 0150 00000000 		.word	0
 2435 0154 00000000 		.word	0
 2436 0158 02000000 		.word	2
 2437 015c 00000000 		.word	0
 2438 0160 00000000 		.word	0
 2439 0164 00000000 		.word	0
 2440 0168 01000000 		.word	1
 2441 016c 00000000 		.word	0
 2442 0170 00000000 		.word	0
 2443 0174 00000000 		.word	0
 2444 0178 01000000 		.word	1
 2445 017c 00000000 		.word	0
 2446 0180 00000000 		.word	0
 2447 0184 00000000 		.word	0
 2448 0188 00000000 		.word	0
 2449 018c 00000000 		.word	0
ARM GAS  /tmp/ccuTCLvw.s 			page 52


 2450 0190 01000000 		.word	1
 2451 0194 01000000 		.word	1
 2452 0198 02000000 		.word	2
 2453 019c 01000000 		.word	1
 2454 01a0 00000000 		.word	0
 2455 01a4 00000000 		.word	0
 2456 01a8 00000000 		.word	0
 2457 01ac 00000000 		.word	0
 2458 01b0 00000000 		.word	0
 2459 01b4 00000000 		.word	0
 2460 01b8 00000000 		.word	0
 2461 01bc 00000000 		.word	0
 2462 01c0 00000000 		.word	0
 2463 01c4 00000000 		.word	0
 2464 01c8 01000000 		.word	1
 2465 01cc 00000000 		.word	0
 2466 01d0 00000000 		.word	0
 2467 01d4 00000000 		.word	0
 2468 01d8 02000000 		.word	2
 2469 01dc 00000000 		.word	0
 2470 01e0 00000000 		.word	0
 2471 01e4 00000000 		.word	0
 2472 01e8 01000000 		.word	1
 2473 01ec 00000000 		.word	0
 2474 01f0 00000000 		.word	0
 2475 01f4 00000000 		.word	0
 2476 01f8 01000000 		.word	1
 2477 01fc 00000000 		.word	0
 2478 0200 00000000 		.word	0
 2479 0204 00000000 		.word	0
 2480 0208 00000000 		.word	0
 2481 020c 00000000 		.word	0
 2482 0210 00000000 		.word	0
 2483 0214 00000000 		.word	0
 2484 0218 02000000 		.word	2
 2485 021c 01000000 		.word	1
 2486 0220 00000000 		.word	0
 2487 0224 01000000 		.word	1
 2488 0228 01000000 		.word	1
 2489 022c 00000000 		.word	0
 2490 0230 00000000 		.word	0
 2491 0234 00000000 		.word	0
 2492 0238 00000000 		.word	0
 2493 023c 00000000 		.word	0
 2494 0240 00000000 		.word	0
 2495 0244 00000000 		.word	0
 2496 0248 01000000 		.word	1
 2497 024c 00000000 		.word	0
 2498 0250 00000000 		.word	0
 2499 0254 00000000 		.word	0
 2500 0258 02000000 		.word	2
 2501 025c 01000000 		.word	1
 2502 0260 00000000 		.word	0
 2503 0264 00000000 		.word	0
 2504 0268 00000000 		.word	0
 2505 026c 01000000 		.word	1
 2506 0270 00000000 		.word	0
ARM GAS  /tmp/ccuTCLvw.s 			page 53


 2507 0274 00000000 		.word	0
 2508 0278 00000000 		.word	0
 2509 027c 00000000 		.word	0
 2510 0280 00000000 		.word	0
 2511 0284 00000000 		.word	0
 2512 0288 00000000 		.word	0
 2513 028c 00000000 		.word	0
 2514 0290 00000000 		.word	0
 2515 0294 00000000 		.word	0
 2516 0298 02000000 		.word	2
 2517 029c 01000000 		.word	1
 2518 02a0 00000000 		.word	0
 2519 02a4 01000000 		.word	1
 2520 02a8 01000000 		.word	1
 2521 02ac 00000000 		.word	0
 2522 02b0 00000000 		.word	0
 2523 02b4 00000000 		.word	0
 2524 02b8 00000000 		.word	0
 2525 02bc 00000000 		.word	0
 2526 02c0 00000000 		.word	0
 2527 02c4 00000000 		.word	0
 2528 02c8 01000000 		.word	1
 2529 02cc 00000000 		.word	0
 2530 02d0 00000000 		.word	0
 2531 02d4 00000000 		.word	0
 2532 02d8 02000000 		.word	2
 2533 02dc 01000000 		.word	1
 2534 02e0 00000000 		.word	0
 2535 02e4 00000000 		.word	0
 2536 02e8 00000000 		.word	0
 2537 02ec 01000000 		.word	1
 2538 02f0 00000000 		.word	0
 2539 02f4 00000000 		.word	0
 2540 02f8 00000000 		.word	0
 2541 02fc 00000000 		.word	0
 2542 0300 00000000 		.word	0
 2543 0304 00000000 		.word	0
 2544 0308 00000000 		.word	0
 2545 030c 00000000 		.word	0
 2546 0310 00000000 		.word	0
 2547 0314 01000000 		.word	1
 2548 0318 02000000 		.word	2
 2549 031c 00000000 		.word	0
 2550 0320 00000000 		.word	0
 2551 0324 00000000 		.word	0
 2552 0328 01000000 		.word	1
 2553 032c 01000000 		.word	1
 2554 0330 00000000 		.word	0
 2555 0334 00000000 		.word	0
 2556 0338 00000000 		.word	0
 2557 033c 00000000 		.word	0
 2558 0340 00000000 		.word	0
 2559 0344 00000000 		.word	0
 2560 0348 00000000 		.word	0
 2561 034c 01000000 		.word	1
 2562 0350 00000000 		.word	0
 2563 0354 00000000 		.word	0
ARM GAS  /tmp/ccuTCLvw.s 			page 54


 2564 0358 02000000 		.word	2
 2565 035c 01000000 		.word	1
 2566 0360 00000000 		.word	0
 2567 0364 00000000 		.word	0
 2568 0368 01000000 		.word	1
 2569 036c 00000000 		.word	0
 2570 0370 00000000 		.word	0
 2571 0374 00000000 		.word	0
 2572 0378 00000000 		.word	0
 2573 037c 00000000 		.word	0
 2574 0380 00000000 		.word	0
 2575 0384 00000000 		.word	0
 2576 0388 00000000 		.word	0
 2577 038c 00000000 		.word	0
 2578 0390 00000000 		.word	0
 2579 0394 01000000 		.word	1
 2580 0398 02000000 		.word	2
 2581 039c 00000000 		.word	0
 2582 03a0 00000000 		.word	0
 2583 03a4 00000000 		.word	0
 2584 03a8 01000000 		.word	1
 2585 03ac 01000000 		.word	1
 2586 03b0 00000000 		.word	0
 2587 03b4 00000000 		.word	0
 2588 03b8 00000000 		.word	0
 2589 03bc 00000000 		.word	0
 2590 03c0 00000000 		.word	0
 2591 03c4 00000000 		.word	0
 2592 03c8 00000000 		.word	0
 2593 03cc 01000000 		.word	1
 2594 03d0 00000000 		.word	0
 2595 03d4 00000000 		.word	0
 2596 03d8 02000000 		.word	2
 2597 03dc 01000000 		.word	1
 2598 03e0 00000000 		.word	0
 2599 03e4 00000000 		.word	0
 2600 03e8 01000000 		.word	1
 2601 03ec 00000000 		.word	0
 2602 03f0 00000000 		.word	0
 2603 03f4 00000000 		.word	0
 2604 03f8 00000000 		.word	0
 2605 03fc 00000000 		.word	0
 2606 0400 00000000 		.word	0
 2607 0404 00000000 		.word	0
 2608 0408 00000000 		.word	0
 2609 040c 00000000 		.word	0
 2610 0410 00000000 		.word	0
 2611 0414 01000000 		.word	1
 2612 0418 02000000 		.word	2
 2613 041c 01000000 		.word	1
 2614 0420 00000000 		.word	0
 2615 0424 01000000 		.word	1
 2616 0428 00000000 		.word	0
 2617 042c 00000000 		.word	0
 2618 0430 00000000 		.word	0
 2619 0434 00000000 		.word	0
 2620 0438 00000000 		.word	0
ARM GAS  /tmp/ccuTCLvw.s 			page 55


 2621 043c 00000000 		.word	0
 2622 0440 00000000 		.word	0
 2623 0444 00000000 		.word	0
 2624 0448 01000000 		.word	1
 2625 044c 00000000 		.word	0
 2626 0450 00000000 		.word	0
 2627 0454 00000000 		.word	0
 2628 0458 02000000 		.word	2
 2629 045c 00000000 		.word	0
 2630 0460 00000000 		.word	0
 2631 0464 00000000 		.word	0
 2632 0468 01000000 		.word	1
 2633 046c 01000000 		.word	1
 2634 0470 00000000 		.word	0
 2635 0474 00000000 		.word	0
 2636 0478 00000000 		.word	0
 2637 047c 00000000 		.word	0
 2638 0480 00000000 		.word	0
 2639 0484 00000000 		.word	0
 2640 0488 00000000 		.word	0
 2641 048c 01000000 		.word	1
 2642 0490 00000000 		.word	0
 2643 0494 01000000 		.word	1
 2644 0498 02000000 		.word	2
 2645 049c 01000000 		.word	1
 2646 04a0 00000000 		.word	0
 2647 04a4 00000000 		.word	0
 2648 04a8 00000000 		.word	0
 2649 04ac 00000000 		.word	0
 2650 04b0 00000000 		.word	0
 2651 04b4 00000000 		.word	0
 2652 04b8 00000000 		.word	0
 2653 04bc 00000000 		.word	0
 2654 04c0 00000000 		.word	0
 2655 04c4 01000000 		.word	1
 2656 04c8 01000000 		.word	1
 2657 04cc 00000000 		.word	0
 2658 04d0 00000000 		.word	0
 2659 04d4 00000000 		.word	0
 2660 04d8 02000000 		.word	2
 2661 04dc 00000000 		.word	0
 2662 04e0 00000000 		.word	0
 2663 04e4 00000000 		.word	0
 2664 04e8 01000000 		.word	1
 2665 04ec 00000000 		.word	0
 2666 04f0 00000000 		.word	0
 2667 04f4 00000000 		.word	0
 2668 04f8 00000000 		.word	0
 2669 04fc 00000000 		.word	0
 2670 0500 00000000 		.word	0
 2671 0504 00000000 		.word	0
 2672 0508 00000000 		.word	0
 2673 050c 00000000 		.word	0
 2674 0510 00000000 		.word	0
 2675 0514 01000000 		.word	1
 2676 0518 02000000 		.word	2
 2677 051c 01000000 		.word	1
ARM GAS  /tmp/ccuTCLvw.s 			page 56


 2678 0520 00000000 		.word	0
 2679 0524 00000000 		.word	0
 2680 0528 00000000 		.word	0
 2681 052c 01000000 		.word	1
 2682 0530 00000000 		.word	0
 2683 0534 00000000 		.word	0
 2684 0538 00000000 		.word	0
 2685 053c 00000000 		.word	0
 2686 0540 00000000 		.word	0
 2687 0544 00000000 		.word	0
 2688 0548 01000000 		.word	1
 2689 054c 01000000 		.word	1
 2690 0550 00000000 		.word	0
 2691 0554 00000000 		.word	0
 2692 0558 02000000 		.word	2
 2693 055c 00000000 		.word	0
 2694 0560 00000000 		.word	0
 2695 0564 00000000 		.word	0
 2696 0568 01000000 		.word	1
 2697 056c 00000000 		.word	0
 2698 0570 00000000 		.word	0
 2699 0574 00000000 		.word	0
 2700 0578 00000000 		.word	0
 2701 057c 00000000 		.word	0
 2702 0580 00000000 		.word	0
 2703 0584 01000000 		.word	1
 2704 0588 00000000 		.word	0
 2705 058c 00000000 		.word	0
 2706 0590 00000000 		.word	0
 2707 0594 01000000 		.word	1
 2708 0598 02000000 		.word	2
 2709 059c 01000000 		.word	1
 2710 05a0 00000000 		.word	0
 2711 05a4 00000000 		.word	0
 2712 05a8 00000000 		.word	0
 2713 05ac 00000000 		.word	0
 2714 05b0 00000000 		.word	0
 2715 05b4 00000000 		.word	0
 2716 05b8 00000000 		.word	0
 2717 05bc 00000000 		.word	0
 2718 05c0 00000000 		.word	0
 2719 05c4 00000000 		.word	0
 2720 05c8 01000000 		.word	1
 2721 05cc 00000000 		.word	0
 2722 05d0 00000000 		.word	0
 2723 05d4 00000000 		.word	0
 2724 05d8 02000000 		.word	2
 2725 05dc 00000000 		.word	0
 2726 05e0 00000000 		.word	0
 2727 05e4 01000000 		.word	1
 2728 05e8 01000000 		.word	1
 2729 05ec 00000000 		.word	0
 2730 05f0 00000000 		.word	0
 2731 05f4 00000000 		.word	0
 2732 05f8 00000000 		.word	0
 2733 05fc 00000000 		.word	0
 2734 0600 00000000 		.word	0
ARM GAS  /tmp/ccuTCLvw.s 			page 57


 2735 0604 00000000 		.word	0
 2736 0608 00000000 		.word	0
 2737 060c 00000000 		.word	0
 2738 0610 00000000 		.word	0
 2739 0614 01000000 		.word	1
 2740 0618 02000000 		.word	2
 2741 061c 01000000 		.word	1
 2742 0620 00000000 		.word	0
 2743 0624 00000000 		.word	0
 2744 0628 01000000 		.word	1
 2745 062c 00000000 		.word	0
 2746 0630 00000000 		.word	0
 2747 0634 00000000 		.word	0
 2748 0638 00000000 		.word	0
 2749 063c 00000000 		.word	0
 2750 0640 00000000 		.word	0
 2751 0644 00000000 		.word	0
 2752 0648 01000000 		.word	1
 2753 064c 00000000 		.word	0
 2754 0650 00000000 		.word	0
 2755 0654 00000000 		.word	0
 2756 0658 02000000 		.word	2
 2757 065c 01000000 		.word	1
 2758 0660 00000000 		.word	0
 2759 0664 00000000 		.word	0
 2760 0668 01000000 		.word	1
 2761 066c 00000000 		.word	0
 2762 0670 00000000 		.word	0
 2763 0674 00000000 		.word	0
 2764 0678 00000000 		.word	0
 2765 067c 00000000 		.word	0
 2766 0680 00000000 		.word	0
 2767 0684 00000000 		.word	0
 2768 0688 01000000 		.word	1
 2769 068c 00000000 		.word	0
 2770 0690 00000000 		.word	0
 2771 0694 01000000 		.word	1
 2772 0698 02000000 		.word	2
 2773 069c 01000000 		.word	1
 2774 06a0 00000000 		.word	0
 2775 06a4 00000000 		.word	0
 2776 06a8 00000000 		.word	0
 2777 06ac 00000000 		.word	0
 2778 06b0 00000000 		.word	0
 2779 06b4 00000000 		.word	0
 2780 06b8 00000000 		.word	0
 2781 06bc 00000000 		.word	0
 2782 06c0 00000000 		.word	0
 2783 06c4 00000000 		.word	0
 2784 06c8 01000000 		.word	1
 2785 06cc 00000000 		.word	0
 2786 06d0 00000000 		.word	0
 2787 06d4 01000000 		.word	1
 2788 06d8 02000000 		.word	2
 2789 06dc 00000000 		.word	0
 2790 06e0 00000000 		.word	0
 2791 06e4 00000000 		.word	0
ARM GAS  /tmp/ccuTCLvw.s 			page 58


 2792 06e8 01000000 		.word	1
 2793 06ec 00000000 		.word	0
 2794 06f0 00000000 		.word	0
 2795 06f4 00000000 		.word	0
 2796 06f8 00000000 		.word	0
 2797 06fc 00000000 		.word	0
 2798              		.text
 2799              	.Letext0:
 2800              		.file 2 "/usr/include/newlib/machine/_default_types.h"
 2801              		.file 3 "/usr/include/newlib/sys/lock.h"
 2802              		.file 4 "/usr/include/newlib/sys/_types.h"
 2803              		.file 5 "/usr/lib/gcc/arm-none-eabi/6.3.1/include/stddef.h"
 2804              		.file 6 "/usr/include/newlib/sys/reent.h"
 2805              		.file 7 "/usr/include/newlib/sys/_stdint.h"
 2806              		.file 8 "/usr/include/newlib/stdlib.h"
 2807              		.file 9 "Core/Src/../Inc/piece.h"
 2808              		.file 10 "Core/Src/../Inc/board.h"
 2809              		.file 11 "Drivers/CMSIS/Include/core_cm4.h"
 2810              		.file 12 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/system_stm32f4xx.h"
 2811              		.file 13 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal.h"
 2812              		.file 14 "Core/Src/../Inc/shapes.h"
 2813              		.file 15 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h"
 2814              		.file 16 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_tim.h"
 2815              		.file 17 "Core/Src/../Inc/../Inc/../Inc/5x5_font.h"
 2816              		.file 18 "Core/Src/../Inc/../Inc/ILI9341_Driver.h"
 2817              		.file 19 "/usr/include/newlib/time.h"
 2818              		.file 20 "/usr/include/newlib/math.h"
 2819              		.file 21 "Core/Src/../Inc/main.h"
ARM GAS  /tmp/ccuTCLvw.s 			page 59


DEFINED SYMBOLS
                            *ABS*:0000000000000000 board.c
     /tmp/ccuTCLvw.s:18     .text.flood:0000000000000000 $t
     /tmp/ccuTCLvw.s:25     .text.flood:0000000000000000 flood
     /tmp/ccuTCLvw.s:165    .text.flood:00000000000000d4 $d
     /tmp/ccuTCLvw.s:170    .text.floodB:0000000000000000 $t
     /tmp/ccuTCLvw.s:177    .text.floodB:0000000000000000 floodB
     /tmp/ccuTCLvw.s:333    .text.floodB:00000000000000ec $d
     /tmp/ccuTCLvw.s:338    .text.floodFill:0000000000000000 $t
     /tmp/ccuTCLvw.s:345    .text.floodFill:0000000000000000 floodFill
     /tmp/ccuTCLvw.s:419    .text.initBoard:0000000000000000 $t
     /tmp/ccuTCLvw.s:426    .text.initBoard:0000000000000000 initBoard
     /tmp/ccuTCLvw.s:483    .text.drawPiece:0000000000000000 $t
     /tmp/ccuTCLvw.s:490    .text.drawPiece:0000000000000000 drawPiece
     /tmp/ccuTCLvw.s:545    .text.drawPiece:0000000000000032 $d
     /tmp/ccuTCLvw.s:649    .text.clearPiece:0000000000000000 $t
     /tmp/ccuTCLvw.s:656    .text.clearPiece:0000000000000000 clearPiece
     /tmp/ccuTCLvw.s:727    .text.setCurrentPiece:0000000000000000 $t
     /tmp/ccuTCLvw.s:734    .text.setCurrentPiece:0000000000000000 setCurrentPiece
     /tmp/ccuTCLvw.s:749    .text.newPiece:0000000000000000 $t
     /tmp/ccuTCLvw.s:756    .text.newPiece:0000000000000000 newPiece
     /tmp/ccuTCLvw.s:799    .text.getCurrentPiece:0000000000000000 $t
     /tmp/ccuTCLvw.s:806    .text.getCurrentPiece:0000000000000000 getCurrentPiece
     /tmp/ccuTCLvw.s:822    .text.isCurrentPieceMovable:0000000000000000 $t
     /tmp/ccuTCLvw.s:829    .text.isCurrentPieceMovable:0000000000000000 isCurrentPieceMovable
     /tmp/ccuTCLvw.s:935    .text.isCurrentPieceRotable:0000000000000000 $t
     /tmp/ccuTCLvw.s:942    .text.isCurrentPieceRotable:0000000000000000 isCurrentPieceRotable
     /tmp/ccuTCLvw.s:1049   .text.moveCurrentPieceDown:0000000000000000 $t
     /tmp/ccuTCLvw.s:1056   .text.moveCurrentPieceDown:0000000000000000 moveCurrentPieceDown
     /tmp/ccuTCLvw.s:1118   .text.moveCurrentPieceLeft:0000000000000000 $t
     /tmp/ccuTCLvw.s:1125   .text.moveCurrentPieceLeft:0000000000000000 moveCurrentPieceLeft
     /tmp/ccuTCLvw.s:1186   .text.moveCurrentPieceRight:0000000000000000 $t
     /tmp/ccuTCLvw.s:1193   .text.moveCurrentPieceRight:0000000000000000 moveCurrentPieceRight
     /tmp/ccuTCLvw.s:1254   .text.rotateCurrentPieceLeft:0000000000000000 $t
     /tmp/ccuTCLvw.s:1261   .text.rotateCurrentPieceLeft:0000000000000000 rotateCurrentPieceLeft
     /tmp/ccuTCLvw.s:1324   .text.rotateCurrentPieceRight:0000000000000000 $t
     /tmp/ccuTCLvw.s:1331   .text.rotateCurrentPieceRight:0000000000000000 rotateCurrentPieceRight
     /tmp/ccuTCLvw.s:1394   .text.deleteLine:0000000000000000 $t
     /tmp/ccuTCLvw.s:1401   .text.deleteLine:0000000000000000 deleteLine
     /tmp/ccuTCLvw.s:1469   .text.deletePossibleLines:0000000000000000 $t
     /tmp/ccuTCLvw.s:1476   .text.deletePossibleLines:0000000000000000 deletePossibleLines
     /tmp/ccuTCLvw.s:1557   .text.dropCurrentPiece:0000000000000000 $t
     /tmp/ccuTCLvw.s:1564   .text.dropCurrentPiece:0000000000000000 dropCurrentPiece
     /tmp/ccuTCLvw.s:1622   .text.isCurrentPieceFallen:0000000000000000 $t
     /tmp/ccuTCLvw.s:1629   .text.isCurrentPieceFallen:0000000000000000 isCurrentPieceFallen
     /tmp/ccuTCLvw.s:1677   .text.moveCurrentPieceDownBot:0000000000000000 $t
     /tmp/ccuTCLvw.s:1684   .text.moveCurrentPieceDownBot:0000000000000000 moveCurrentPieceDownBot
     /tmp/ccuTCLvw.s:1718   .text.isGameOver:0000000000000000 $t
     /tmp/ccuTCLvw.s:1725   .text.isGameOver:0000000000000000 isGameOver
     /tmp/ccuTCLvw.s:1770   .text.print:0000000000000000 $t
     /tmp/ccuTCLvw.s:1777   .text.print:0000000000000000 print
     /tmp/ccuTCLvw.s:1908   .text.print:00000000000000a4 $d
     /tmp/ccuTCLvw.s:1916   .text.print:00000000000000c4 $t
     /tmp/ccuTCLvw.s:1940   .text.print:00000000000000d4 $d
     /tmp/ccuTCLvw.s:1946   .text.printBorders:0000000000000000 $t
     /tmp/ccuTCLvw.s:1953   .text.printBorders:0000000000000000 printBorders
     /tmp/ccuTCLvw.s:2025   .text.printBorders:0000000000000060 $d
ARM GAS  /tmp/ccuTCLvw.s 			page 60


     /tmp/ccuTCLvw.s:2030   .text.printNextPiece:0000000000000000 $t
     /tmp/ccuTCLvw.s:2037   .text.printNextPiece:0000000000000000 printNextPiece
     /tmp/ccuTCLvw.s:2073   .text.printNextPiece:0000000000000026 $d
     /tmp/ccuTCLvw.s:2269   .text.printNextPiece:0000000000000158 $d
     /tmp/ccuTCLvw.s:2274   .text.clear:0000000000000000 $t
     /tmp/ccuTCLvw.s:2281   .text.clear:0000000000000000 clear
     /tmp/ccuTCLvw.s:2338   .bss.previousArea.12282:0000000000000000 $d
     /tmp/ccuTCLvw.s:2342   .bss.previousArea.12282:0000000000000000 previousArea.12282
     /tmp/ccuTCLvw.s:2345   .rodata.PIECES:0000000000000000 $d
     /tmp/ccuTCLvw.s:2349   .rodata.PIECES:0000000000000000 PIECES
                     .debug_frame:0000000000000010 $d
     /tmp/ccuTCLvw.s:552    .text.drawPiece:0000000000000039 $d
     /tmp/ccuTCLvw.s:552    .text.drawPiece:000000000000003a $t
     /tmp/ccuTCLvw.s:2080   .text.printNextPiece:000000000000002d $d
     /tmp/ccuTCLvw.s:2080   .text.printNextPiece:000000000000002e $t

UNDEFINED SYMBOLS
getPosX
getPosY
getKind
getOrientation
setColor
getColor
setPosX
setPosY
setOrientation
fillRect
TFTWIDTH
